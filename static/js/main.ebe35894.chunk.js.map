{"version":3,"sources":["store/action.js","store/store.js","store/index.js","store/util.js","bestPick/Style.js","operators.js","Styles/Table.js","constants.js","view/TblView.js","sort/constants.js","sort/index.js","Styles/Txt.js","Txt.js","Filters.js","Tbl.js","PercentageDiff.js","Styles/Container.js","Styles/Modal.js","modal.js","bestPick/index.js","App.js","reportWebVitals.js","index.js"],"names":["action","ADD_TEXT","ADD_STOCKS","ADD_FILTERS","ADD_AVG","ADD_SEARCH","UPD_FILTERS","UPD_AVG","DELETE_STOCK","UPD_HIGH_AVG","UPD_LOW_AVG","UPD_MAX_PER","UPD_STOCKS","ADD_TO_COMPARE","initialState","txt","highAvg","lowAvg","maxPer","stocks","filtersList","average","searchParams","filtersCnt","compare","reducer","state","type","data","parseStocks","filters","createFilters","avg","getAvg","addToSearch","cnt","searchObj","updFilters","updFilter","key","col","value","updAverage","updAvg","updStocks","deleteStock","ScreenContext","createContext","Provider","children","store","useReducer","useStore","useContext","tmpStocks","JSON","parse","Array","isArray","e","alert","length","Object","keys","map","label","operator","checked","exclude","hightAvg","valueAr","forEach","stock","filter","val","parseFloat","len","concat","sort","a","b","rm","removeOddVal","reduce","acc","tmp","updType","num","parseNum","stringify","slice","findPerDiff","newNum","orgNum","findPercentage","values","diff","arr","max","Math","ceil","firstChunk","reverse","lastChunk","firstPercentage","lastPercentage","firstPos","findIndex","fp","lastPos","ModalContainer","styled","div","ModalBody","ModalClose","Content","search","Avg","table","COLOR","th","ABOVE_NINTY","background","color","ABOVE_EIGHTY","ABOVE_SEVENTY","ABOVE_SIXTY","ABOVE_FIFTY","BELOW_FIFTY","Heading","dispatch","useState","isAscending","setAscending","cols","sortTable","onClick","bind","round","CheckCmp","name","onChange","isChecked","includes","setChecked","useEffect","Col","rowNum","Name","isHighlight","setHighlight","handleChange","target","className","index","indexOf","push","console","log","colName","params","operators","processResult","style","matchCnt","percentage","calcPercent","Rows","props","Tbl","border","bold","eps","order","npm","opm","sales","roe","cashFlow","debt","pe","colsOrder","round5","n","abs","Number","res","sortStocks","sortByCol","asc","v1","v2","desc","colOrder","colList","join","eval","SortedStocks","openSort","setSort","sortList","setSortList","sortBy","setSortBy","tmpStore","split","TextArea","textarea","Button","button","Header","Txt","handleAvg","placeholder","CompareDropDown","isCompare","setCompare","display","flexDirection","justifyContent","width","margin","autoComplete","Filters","TblView","DiffList","precentages","textAlign","PercentageDiff","vals","setVal","setPrecentages","v","per","AddDiff","cmps","setCmp","prompt","CmpName","flexWrap","cmp","Container","ModalContent","Modal","showModal","getPercentage","col1","col2","findBest","findMaxMatch","position","avgPos","t","sortByBest","maxMatch","calc","epsAnnGrowthPercent","epsPrevAnnGrowthPercent","epsPreYearQtrPercent","epsPreQtrPercent","roePercent","rocePercent","addMetrics","filterStocks","roce","saleGrowth","qtrSalesVar","npmCur","opmCur","currentMatch","currentBest","roePrevAnn","rocePrevYr","historyMatch","histBest","roe3","roce3","sales3","avg3Match","avg3Best","roe5","roce5","sales5","avg5Match","avg5Best","epsCmp12Mnth","epsCmp12MnthMatch","epsCmp12MnthBest","epsCmpLastYr","epsCmpLastYrMatch","epsCmpLastYrBest","epsCmpLastYrQtr","epsCmpLastYrQtrMatch","epsCmpLastYrQtrBest","epsCmpPrevQtr","epsCmpPrevQtrMatch","epsCmpPrevQtrBest","roePercentMatch","roePercentBest","rocePercentMatch","rocePercentBest","opmPercent","opmAnnPercent","opmPrevAnnPercent","opmQtrPercent","opmPrevQtrPercent","opmPrevYrQtrPercent","opmPercentMatch","opmPercentBest","npmAnnPercent","npmPrevAnnPercent","npmQtrPercent","npmPrevQtrPercent","npmPrevYrQtrPercent","npmPercentMatch","npmPercentBest","allMatch","finalBest","rows","row","BestPick","openBestPick","setBestPic","App","isModalOpen","setModalOpen","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ebe35894.chunk.js","sourcesContent":["const action = {\r\n    ADD_TEXT: 'ADD_TEXT',\r\n    ADD_STOCKS: 'ADD_STOCKS',\r\n    ADD_FILTERS: 'ADD_FILTERS',\r\n    ADD_AVG: 'ADD_AVG',\r\n    ADD_SEARCH: 'ADD_SEARCH',\r\n    UPD_FILTERS: 'UPD_FILTERS',\r\n    UPD_AVG: 'UPD_AVG',\r\n    DELETE_STOCK: 'DELETE_STOCK',\r\n    UPD_HIGH_AVG: 'UPD_HIGH_AVG',\r\n    UPD_LOW_AVG: 'UPD_LOW_AVG',\r\n    UPD_MAX_PER: 'UPD_MAX_PER',\r\n    UPD_STOCKS: 'UPD_STOCKS',\r\n    ADD_TO_COMPARE: 'ADD_TO_COMPARE'\r\n}\r\n\r\nexport default action;","import {\r\n    parseStocks,\r\n    createFilters,\r\n    getAvg,\r\n    addToSearch,\r\n    updFilter,\r\n    updAvg,\r\n    deleteStock\r\n} from './util';\r\nexport const initialState = {\r\n    txt: '',\r\n    highAvg: 100,\r\n    lowAvg: 100,\r\n    maxPer: 10,\r\n    stocks: [],\r\n    filtersList: [],\r\n    average: {},\r\n    searchParams: {},\r\n    filtersCnt: 0,\r\n    compare: []\r\n};\r\n\r\n\r\nexport const reducer = (state, action) => {\r\n    const { type, data } = action;\r\n    switch (type) {\r\n        case \"ADD_TEXT\":\r\n            return { ...state, txt: data.txt };\r\n        case \"ADD_STOCKS\":\r\n            const stocks = parseStocks(state.txt);\r\n            return {\r\n                ...state, stocks: stocks, filtersList: [], filtersList: [],\r\n                average: {},\r\n                searchParams: {},\r\n                filtersCnt: 0\r\n            };\r\n        case \"ADD_FILTERS\":\r\n            const filters = createFilters(state.stocks);\r\n            return { ...state, filtersList: filters };\r\n        case \"ADD_AVG\":\r\n            const avg = getAvg(state.stocks, state.maxPer, state.highAvg, state.lowAvg);\r\n            return { ...state, average: avg };\r\n        case \"ADD_SEARCH\":\r\n            const { cnt, searchObj } = addToSearch(state.filtersList);\r\n            return { ...state, searchParams: searchObj, filtersCnt: cnt };\r\n        case \"UPD_FILTERS\":\r\n            const updFilters = updFilter(state.filtersList, data.key, data.col, data.value);\r\n            return { ...state, filtersList: updFilters };\r\n        case \"UPD_AVG\":\r\n            const updAverage = updAvg({ ...data, average: state.average });\r\n            return { ...state, average: updAverage };\r\n        case \"DELETE_STOCK\":\r\n            const updStocks = deleteStock(data.key, state.stocks);\r\n            return { ...state, stocks: updStocks };\r\n        case \"UPD_HIGH_AVG\":\r\n            return { ...state, highAvg: data.value };\r\n        case \"UPD_LOW_AVG\":\r\n            return { ...state, lowAvg: data.value };\r\n        case \"UPD_MAX_PER\":\r\n            return { ...state, maxPer: data.value };\r\n        case \"UPD_STOCKS\":\r\n            return { ...state, stocks: data.stocks };\r\n        case \"ADD_TO_COMPARE\":\r\n            return { ...state, compare: data.compare };\r\n        default:\r\n            return state;\r\n    }\r\n}","import React, { useReducer, useContext, createContext } from 'react';\r\nimport { reducer, initialState } from './store';\r\nexport let ScreenContext = createContext({});\r\nexport const Provider = ({ children }) => {\r\n    let store = useReducer(reducer, initialState);\r\n    return (\r\n        <ScreenContext.Provider value={store}>\r\n            {children}\r\n        </ScreenContext.Provider>\r\n    )\r\n};\r\n\r\n\r\nexport const useStore = () => {\r\n    let store = useContext(ScreenContext);\r\n    return store;\r\n}","export const parseStocks = (txt) => {\r\n    try {\r\n        let tmpStocks = JSON.parse(txt);\r\n        if (!Array.isArray(tmpStocks)) { tmpStocks = [tmpStocks] }\r\n        return tmpStocks;\r\n    } catch (e) {\r\n        alert(\"Invlaid JSON\")\r\n    }\r\n}\r\n\r\nexport const createFilters = (stocks) => {\r\n    if (stocks?.length) {\r\n        const firstRow = Object.keys(stocks[0].filters);\r\n        const tmpFilters = firstRow.map((key) => {\r\n            return {\r\n                label: key,\r\n                value: '',\r\n                operator: '',\r\n                checked: false,\r\n                exclude: []\r\n            }\r\n        });\r\n        return tmpFilters;\r\n    } else {\r\n        return [];\r\n    }\r\n}\r\n\r\nexport const getAvg = (stocks, maxPer = 10, hightAvg = 100, lowAvg = 100) => {\r\n    if (Array.isArray(stocks) && stocks?.length) {\r\n        let avg = {};\r\n        let valueAr = {};\r\n        stocks.forEach(stock => {\r\n            const { filters } = stock;\r\n            Object.keys(filters).forEach(filter => {\r\n                const val = parseFloat(avg[filter]?.val || 0) + parseFloat(filters[filter] || 0);\r\n                const len = filters[filter] != '' ? (avg[filter]?.len || 0) + 1 : avg[filter]?.len;\r\n                if (filters[filter] != '') {\r\n                    valueAr[filter] = (valueAr[filter] || []).concat(parseFloat(filters[filter]));\r\n                }\r\n                avg[filter] = { val, len };\r\n            });\r\n        });\r\n        Object.keys(valueAr).forEach(filter => {\r\n            valueAr[filter].sort((a, b) => a - b);\r\n            const rm = removeOddVal(valueAr[filter], maxPer, hightAvg, lowAvg);\r\n            rm.forEach(val => {\r\n                avg[filter].val -= val\r\n                avg[filter].len--;\r\n            });\r\n            avg[filter].rm = rm;\r\n        });\r\n        return avg;\r\n    }\r\n}\r\n\r\nexport const addToSearch = (filters) => {\r\n    let cnt = 0;\r\n    const searchObj = filters.reduce((acc, val) => {\r\n        if (val.checked) {\r\n            cnt++;\r\n            let tmp = {\r\n                [val.label]: {\r\n                    value: val.value,\r\n                    operator: val.operator,\r\n                }\r\n            };\r\n            return { ...acc, ...tmp };\r\n        }\r\n        return acc;\r\n    }, {});\r\n    return {\r\n        cnt,\r\n        searchObj\r\n    };\r\n}\r\n\r\nexport const updFilter = (filtersList, key, col, value) => {\r\n    const tmp = [...filtersList];\r\n    tmp[key][col] = value;\r\n    return tmp;\r\n}\r\n\r\nexport const updAvg = ({ updType, filter, num, average }) => {\r\n    const parseNum = parseFloat(num) || 0;\r\n    let tmp = JSON.parse(JSON.stringify(average));\r\n    tmp[filter].val = updType === 'sub' ? (tmp[filter].val - (parseNum)) : (parseFloat(tmp[filter].val) + parseNum);\r\n    tmp[filter].len = updType === 'sub' ? (tmp[filter].len - 1) : (parseFloat(tmp[filter].len) + 1);\r\n    return tmp;\r\n}\r\n\r\nexport const deleteStock = (key, stocks) => {\r\n    const newStocks = [...stocks.slice(0, key), ...stocks.slice(key + 1)]\r\n    return newStocks;\r\n};\r\n\r\nexport const findPerDiff = (newNum, orgNum) => {\r\n    return ((newNum - orgNum) / orgNum) * 100;\r\n}\r\n\r\nconst findPercentage = (values) => {\r\n    return values.reduce((acc, val, key) => {\r\n        let tmp = {\r\n            diff: 0,\r\n            val\r\n        };\r\n        if (key === 0) return [tmp];\r\n        tmp.diff = findPerDiff(val, values[key - 1]);\r\n        return [...acc, tmp];\r\n    }, []);\r\n\r\n\r\n}\r\nexport const removeOddVal = (arr, maxPer = 10, highAvg = 100, lowAvg = 100) => {\r\n    arr.sort((a, b) => a - b)\r\n    const len = arr.length;\r\n    const max = Math.ceil((len / 100) * maxPer);\r\n    const firstChunk = arr.slice(0, max).reverse();\r\n    const lastChunk = arr.slice(len - max);\r\n    const firstPercentage = findPercentage(firstChunk);\r\n    const lastPercentage = findPercentage(lastChunk);\r\n    const firstPos = firstPercentage.findIndex(fp => fp.diff > lowAvg);\r\n    const lastPos = lastPercentage.findIndex(fp => fp.diff > highAvg);\r\n\r\n    const rm = [\r\n        ...(firstPos > -1 ? firstChunk.slice(firstPos) : []),\r\n        ...(lastPos > -1 ? lastChunk.slice(lastPos) : [])\r\n    ]\r\n    return rm;\r\n}\r\n","import styled from 'styled-components';\r\n\r\nconst ModalContainer = styled.div`\r\n    position:fixed;\r\n    width:100%;\r\n    height:100%;\r\n    right:0;\r\n    left:0;\r\n    top:0;\r\n    z-index:1000;\r\n    background:rgb(0, 0, 0, 0.4);\r\n    display:flex;\r\n    justify-content:center;\r\n    align-items:center;    \r\n    overflow:hidden;\r\n`;\r\n\r\nconst ModalBody = styled.div`\r\n    position:relative;\r\n    background:white;\r\n    max-width:100%;\r\n    max-height:100%;\r\n    padding:5px;\r\n    overflow:auto;\r\n`;\r\n\r\nconst ModalClose = styled.div`\r\n    position:absolute;\r\n    top:0;\r\n    right:0;\r\n    padding:5px;\r\n`;\r\n\r\nconst Content = styled.div`\r\n    display:flex;\r\n    flex-wrap: wrap;\r\n    \r\n    >\r\n    div{\r\n        margin:5px;\r\n        max-width:20%;        \r\n    }\r\n    table tr th{\r\n        position:relative;\r\n    }\r\n    \r\n`;\r\nexport {\r\n    ModalContainer,\r\n    ModalBody,\r\n    ModalClose,\r\n    Content\r\n}","const search = {\r\n    '>': (a, b) => (parseFloat(a) > parseFloat(b)),\r\n    '>=': (a, b) => (parseFloat(a) >= parseFloat(b)),\r\n    '<': (a, b) => ((parseFloat(a) < parseFloat(b)) && a >= 0),\r\n    '<=': (a, b) => ((parseFloat(a) <= parseFloat(b)) && a >= 0),\r\n    '!=': (a, b) => (parseFloat(a) != parseFloat(b)),\r\n    '==': (a, b) => (parseFloat(a) == parseFloat(b)),\r\n    'GT': (a, b) => (parseFloat(a) >= parseFloat(b)),\r\n    'LT': (a, b) => (parseFloat(a) <= parseFloat(b)),\r\n    'GTA': (a, b) => (parseFloat(a) >= parseFloat(b)),\r\n    'LTA': (a, b) => ((parseFloat(a) <= parseFloat(b)) && a >= 0),\r\n}\r\n\r\nexport default search","import styled from 'styled-components';\r\n\r\n\r\nconst Table = styled.table`\r\nborder:1px solid;\r\n`;\r\n\r\nconst Avg = styled.div`\r\n    background: skyblue;\r\n    border-radius:50%;\r\n    font-size:9px;\r\n`\r\nconst Th = styled.th``;\r\nconst TD = styled.th``;\r\n\r\nexport {\r\n    Table,\r\n    Avg\r\n\r\n}","export const COLOR = {\r\n    RESULT: {\r\n        ABOVE_NINTY: { background: 'green', color: 'rgb(255,255,255)' },\r\n        ABOVE_EIGHTY: { background: 'lightgreen', color: 'rgb(255,255,255)' },\r\n        ABOVE_SEVENTY: { background: 'skyblue', color: 'rgb(255,255,255)' },\r\n        ABOVE_SIXTY: { background: 'orange', color: 'rgb(255,255,255)' },\r\n        ABOVE_FIFTY: { background: 'yellow', color: 'rgb(255,255,255)' },\r\n        BELOW_FIFTY: { background: 'red', color: 'rgb(255,255,255)' }\r\n    }\r\n}\r\n\r\n","import action from './../store/action';\r\nimport operators from './../operators';\r\nimport { Avg } from './../Styles/Table';\r\nimport { COLOR } from './../constants'\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport './../Tbl.css';\r\nconst Heading = ({ stocks, average, dispatch }) => {\r\n    const [isAscending, setAscending] = useState(false);\r\n    const { filters } = stocks[0];\r\n    const cols = Object.keys(filters);\r\n    const sortTable = (col) => {\r\n        let tmpStocks = JSON.parse(JSON.stringify(stocks));\r\n        tmpStocks.sort((a, b) => {\r\n            if (!isAscending) {\r\n                return a.filters[col] - b.filters[col]\r\n            } else {\r\n                return b.filters[col] - a.filters[col]\r\n            }\r\n        });\r\n        setAscending(!isAscending);\r\n        dispatch({ type: action.UPD_STOCKS, data: { stocks: tmpStocks } });\r\n    }\r\n    return (\r\n        <>\r\n            <th>StockName</th>\r\n            {cols.map(col => <th onClick={sortTable.bind(null, col)} >{col}<Avg>{(Math.round(average[col].val / average[col].len))}</Avg></th>)}\r\n            <th>Matches</th>\r\n            <th>Action</th>\r\n        </>\r\n    )\r\n}\r\n\r\nconst CheckCmp = ({ name, value, onChange, average }) => {\r\n\r\n    const { rm } = average[name];\r\n    const isChecked = (value === '' || rm.includes(parseFloat(value))) ? true : false\r\n    const [checked, setChecked] = useState(isChecked);\r\n    useEffect(() => {\r\n        const isChecked = (value === '' || rm.includes(parseFloat(value))) ? true : false;\r\n        setChecked(isChecked);\r\n    }, [...rm]);\r\n\r\n    const handleChange = (e) => {\r\n        setChecked(!checked);\r\n        onChange(e);\r\n    }\r\n    return (\r\n        <>\r\n            <input type=\"checkbox\" name={name} value={value} onChange={handleChange} checked={checked} />\r\n        </>\r\n    )\r\n}\r\nconst Col = ({ stock, rowNum, average, filtersCnt, searchParams, compare, dispatch }) => {\r\n    const { Name, filters } = stock;\r\n    const cols = Object.keys(filters);\r\n    const [isHighlight, setHighlight] = useState(false);\r\n    const calcPercent = (matchCnt) => {\r\n        if (filtersCnt <= 0) return;\r\n        const percentage = ((matchCnt / filtersCnt) * 100);\r\n        if (percentage >= 90) {\r\n            return COLOR.RESULT.ABOVE_NINTY;\r\n        } else if (percentage >= 80) {\r\n            return COLOR.RESULT.ABOVE_EIGHTY;\r\n        } else if (percentage >= 70) {\r\n            return COLOR.RESULT.ABOVE_SEVENTY;\r\n        } else if (percentage >= 60) {\r\n            return COLOR.RESULT.ABOVE_SIXTY;\r\n        } else if (percentage >= 50) {\r\n            return COLOR.RESULT.ABOVE_FIFTY;\r\n        } else {\r\n            return COLOR.RESULT.BELOW_FIFTY;\r\n        }\r\n    }\r\n    let cnt = 0;\r\n    const processResult = (colName) => {\r\n        const params = searchParams[colName];\r\n\r\n        if (params && operators[params.operator]) {\r\n            const value = (params.operator === 'LT' || params.operator === 'GT') ? (filters[params.value] || 0) : params.value;\r\n            const className = operators[params.operator](filters[colName], value) ? 'greenCol' : 'redCol';\r\n            if (className === 'greenCol') {\r\n                cnt++;\r\n            }\r\n            return className;\r\n        }\r\n        return;\r\n    }\r\n    const handleChange = function (e) {\r\n        const { checked, value, name } = e.target;\r\n        const updType = checked ? 'sub' : 'add';\r\n        dispatch({ type: action.UPD_AVG, data: { updType, filter: name, num: value } });\r\n    }\r\n    const handleDelete = (rowNum) => {\r\n        dispatch({ type: action.DELETE_STOCK, data: { key: rowNum } });\r\n        dispatch({ type: action.ADD_AVG });\r\n    }\r\n    const checkHighlight = () => {\r\n        let tmp = [...compare];\r\n        if (!isHighlight) {\r\n            tmp.push(rowNum);\r\n            console.log(rowNum)\r\n        } else {\r\n            const index = tmp.indexOf(rowNum);\r\n            if (index >= 0) {\r\n                tmp = [...tmp.slice(0, index), ...tmp.slice(index + 1)];\r\n            }\r\n        }\r\n        setHighlight(!isHighlight);\r\n        dispatch({ type: action.ADD_TO_COMPARE, data: { compare: tmp } });\r\n    }\r\n    return (\r\n        <>\r\n            <td className={isHighlight ? 'highlight' : ''}>\r\n                <input type=\"checkbox\" onChange={checkHighlight} />\r\n                {Name}\r\n            </td>\r\n            {\r\n                cols.map((col, key) => {\r\n                    const className = processResult(col, key) || '';\r\n                    return (<td className={`${className} ${isHighlight ? 'highlight' : ''}`} >\r\n\r\n                        <CheckCmp name={col} value={filters[col]} average={average} onChange={handleChange} />\r\n                        {filters[col]}\r\n                    </td>);\r\n                })\r\n            }\r\n            <td className={isHighlight ? 'highlight' : ''} style={calcPercent(cnt)}>{cnt}</td>\r\n            <td><button onClick={handleDelete.bind(null, rowNum)}>Delete</button></td>\r\n        </>\r\n    )\r\n}\r\nconst Rows = (props) => {\r\n    return (\r\n        <>\r\n            <tr>\r\n                <Col {...props} />\r\n            </tr>\r\n        </>\r\n    )\r\n}\r\n\r\nconst Tbl = (\r\n    { average, stocks, filtersCnt, searchParams, compare, dispatch }\r\n) => {\r\n\r\n    return (\r\n        <>\r\n            <table border=\"1\">\r\n                <thead>\r\n                    <tr>\r\n                        <Heading average={average} stocks={stocks} dispatch={dispatch} />\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {stocks.map((stock, rowNum) => <Rows stock={stock} compare={compare} rowNum={rowNum} average={average} filtersCnt={filtersCnt} searchParams={searchParams} dispatch={dispatch} />)}\r\n                </tbody>\r\n                <thead>\r\n                    <tr bold=\"1\">\r\n                        <Heading average={average} stocks={stocks} dispatch={dispatch} />\r\n                    </tr>\r\n                </thead>\r\n            </table>\r\n        </>\r\n    )\r\n}\r\nexport default Tbl;","export const cols = {\r\n    eps: { cols: ['EPSQtrRs', 'EPSPrevQtrRs', 'EPS12M', 'EPSAnnRs', 'EPSPrevAnnRs', 'EPSPYQtrRs'], order: 'desc' },\r\n    npm: { cols: ['NPMAnn', 'NPMPrevAnn', 'NPMQtr', 'NPMPrevQtr', 'NPMPYQtr'], order: 'desc' },\r\n    opm: { cols: ['OPM', 'OPMAnn', 'OPMPrevAnn', 'OPMQtr', 'OPMPrevQtr', 'OPMPYQtr'], order: 'desc' },\r\n    sales: { cols: ['Salesgrowth', 'QtrSalesVar'], order: 'desc' },\r\n    roe: { cols: ['ROE', 'ROCE', 'ROEPrevAnn', 'ROCEPrevYr'], order: 'desc' },\r\n    cashFlow: { cols: ['FreeCashFlowRsCr', 'FCFPrevAnnRsCr'], order: 'desc' },\r\n    debt: { cols: ['Debt to Eq'], order: 'asc' },\r\n    pe: { cols: ['PERatio'], order: 'asc' }\r\n};\r\nexport const colsOrder = ['eps', 'npm', 'opm', 'sales', 'roe', 'cashFlow', 'debt', 'pe'];","import { useState } from 'react';\r\nimport { useStore } from './../store';\r\nimport TblView from './../view/TblView';\r\nimport { cols, colsOrder } from './constants'\r\nimport { ModalContainer, ModalBody, ModalClose, Content } from './../bestPick/Style';\r\n\r\n\r\nconst round5 = (num) => {\r\n    if (!num) num = 0;\r\n    let n = num < 0 ? Math.abs(num) : Number(num);\r\n    const diff = n % 5;\r\n    const res = diff >= 3 ? n + (5 - diff) : n - diff;\r\n    const a = num < 0 ? Number(-res) : Number(res);\r\n    console.log(num + \"===\" + a)\r\n    return a;\r\n}\r\n\r\n/*const sortStocks = (stocks) => {\r\n    return stocks.sort((a, b) => {\r\n        return round5(b.filters.NPMAnn) - round5(a.filters.NPMAnn) || round5(b.filters.NPMPrevAnn) - round5(a.filters.NPMPrevAnn) || round5(b.filters.NPMQtr) - round5(a.filters.NPMQtr) || round5(b.filters.NPMPrevQtr) - round5(a.filters.NPMPrevQtr) || round5(b.filters.NPMPYQtr) - round5(a.filters.NPMPYQtr)\r\n\r\n            || round5(b.filters.OPM) - round5(a.filters.OPM) || round5(b.filters.OPMAnn) - round5(a.filters.OPMAnn) || round5(b.filters.OPMPrevAnn) - round5(a.filters.OPMPrevAnn) || round5(b.filters.OPMQtr) - round5(a.filters.OPMQtr) || round5(b.filters.OPMPrevQtr) - round5(a.filters.OPMPrevQtr) || round5(b.filters.OPMPYQtr) - round5(a.filters.OPMPYQtr)\r\n\r\n\r\n            || round5(b.filters.Salesgrowth) - round5(a.filters.Salesgrowth) || round5(b.filters.QtrSalesVar) - round5(a.filters.QtrSalesVar)\r\n\r\n            || round5(b.filters.EPS12M) - round5(a.filters.EPS12M) || round5(b.filters.EPSAnnRs) - round5(a.filters.EPSAnnRs) || round5(b.filters.EPSPrevAnnRs) - round5(a.filters.EPSPrevAnnRs) || round5(b.filters.EPSQtrRs) - round5(a.filters.EPSQtrRs) || round5(b.filters.EPSPrevQtrRs) - round5(a.filters.EPSPrevQtrRs) || round5(b.filters.EPSPYQtrRs) - round5(a.filters.EPSPYQtrRs)\r\n\r\n            || round5(b.filters.ROE) - round5(a.filters.ROE) || round5(b.filters.ROCE) - round5(a.filters.ROCE) || round5(b.filters.ROEPrevAnn) - round5(a.filters.ROEPrevAnn) || round5(b.filters.ROCEPrevYr) - round5(a.filters.ROCEPrevYr)\r\n\r\n            || round5(b.filters.FreeCashFlowRsCr) - round5(a.filters.FreeCashFlowRsCr)\r\n\r\n            || round5(b.filters.FCFPrevAnnRsCr) - round5(a.filters.FCFPrevAnnRsCr)\r\n\r\n            || round5(a.filters['Debt to Eq']) - round5(b.filters['Debt to Eq'])\r\n\r\n            || round5(a.filters['PERatio']) - round5(b.filters['PERatio'])\r\n\r\n    })\r\n}*/\r\n\r\n\r\n\r\nconst sortStocks = (stocks, sortByCol) => {\r\n    const asc = (v1, v2) => round5(v1) - round5(v2);\r\n    const desc = (v1, v2) => round5(v2) - round5(v1);\r\n\r\n    return stocks.sort((a, b) => {\r\n        const res = sortByCol.map((colOrder) => {\r\n            const colList = cols[colOrder];\r\n            return colList.cols.map((col) => {\r\n                if (colList.order === \"asc\") {\r\n                    return asc(a.filters[col], b.filters[col]);\r\n                } else {\r\n                    return desc(a.filters[col], b.filters[col]);\r\n                }\r\n            }).join('||');\r\n\r\n        }).join('||');\r\n\r\n        return eval(res);\r\n    });\r\n}\r\n\r\nconst SortedStocks = () => {\r\n    const [openSort, setSort] = useState(false);\r\n    const [sortList, setSortList] = useState(colsOrder);\r\n    const [sortBy, setSortBy] = useState(colsOrder);\r\n    const [store] = useStore();\r\n    const tmpStore = JSON.parse(JSON.stringify(store));\r\n    const stocks = sortStocks(tmpStore.stocks, sortBy);\r\n    const handleChange = e => setSortList(e.target.value);\r\n    const onSort = () => {\r\n        setSortBy(sortList.split(','));\r\n    }\r\n    return (\r\n        <>\r\n            <button onClick={e => setSort(!openSort)} >Sort</button>\r\n            {\r\n                openSort && (<ModalContainer>\r\n                    <ModalBody>\r\n                        <ModalClose onClick={e => setSort(!openSort)} >X</ModalClose>\r\n                        <Content>\r\n                            <div>\r\n                                <input type=\"text\" value={sortList} onChange={handleChange} /> <button onClick={onSort} >Sort</button>\r\n                                <TblView\r\n                                    average={tmpStore.average}\r\n                                    stocks={stocks}\r\n                                    dispatch={() => { }}\r\n                                    filtersCnt={tmpStore.filtersCnt}\r\n                                    searchParams={tmpStore.searchParams}\r\n                                    compare={tmpStore.compare}\r\n                                />\r\n\r\n                            </div>\r\n\r\n                        </Content>\r\n                    </ModalBody>\r\n\r\n                </ModalContainer>)\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SortedStocks;\r\n\r\n/*\r\n\r\nconst a = [{\r\n  price:123,\r\n  mark:14\r\n},{\r\n  price:572,\r\n  mark:14\r\n},{\r\n  price:123,\r\n  mark:15\r\n}]\r\n\r\nconst round = (v) => v;\r\nconst sortby = [{name:'price',type:'desc'},{name:'mark',type:'asc'},{name:'price',type:'desc'}];\r\n\r\nconst fun = (a,b)=>{\r\n  const asc = (v1,v2)=>v1-v2;\r\n  const desc = (v1,v2)=>v2-v1;\r\n  const cols = sortby.map((v)=>{\r\n    if(v.type===\"asc\"){\r\n      return asc(a[v.name],b[v.name])\r\n    } else {\r\n      return desc(a[v.name],b[v.name])\r\n    }\r\n  });\r\n\r\n  return eval(cols.join('||'))\r\n}\r\nconsole.log(a.sort(fun))\r\n\r\n*/\r\n\r\n","import styled from 'styled-components';\r\n\r\n\r\nconst TextArea = styled.textarea`\r\n    height:100px;\r\n`;\r\n\r\nconst Button = styled.button`\r\n    width:10%;\r\n    margin:10px 0 0 0;    \r\n`;\r\n\r\nconst Header = styled.div`\r\n    width:100%;\r\n    display:flex;\r\n    flex-direction:column;\r\n`;\r\n\r\nconst Avg = styled.div`\r\nmargin: 5px 0 0 0;\r\ninput{\r\n    margin:0 5px 0 5px;\r\n}\r\nlabel{\r\n    font-weight:bold;\r\n    font-size:0.9rem;\r\n}\r\n\r\n`;\r\nexport {\r\n    TextArea,\r\n    Button,\r\n    Header,\r\n    Avg\r\n}","import { TextArea, Button, Header, Avg } from './Styles/Txt'\r\nimport action from './store/action';\r\nimport { useStore } from './store';\r\nconst Txt = () => {\r\n    const [store, dispatch] = useStore();\r\n    const { txt, } = store;\r\n    const handleChange = (e) => {\r\n        const txt = e.target.value;\r\n        const type = action.ADD_TEXT;\r\n        dispatch({ data: { txt }, type });\r\n    }\r\n    const handleAvg = (e) => {\r\n        const value = e.target.value;\r\n        const name = e.target.name;\r\n        //const type = name === 'highAvg' ? action.UPD_HIGH_AVG : action.UPD_LOW_AVG;\r\n        let type;\r\n        if (name === 'highAvg') {\r\n            type = action.UPD_HIGH_AVG\r\n        } else if (name === 'maxPer') {\r\n            type = action.UPD_MAX_PER;\r\n        } else {\r\n            type = action.UPD_LOW_AVG;\r\n        }\r\n        dispatch({ data: { value }, type });\r\n    }\r\n    const handleSubmit = () => {\r\n        dispatch({ type: action.ADD_STOCKS });\r\n        dispatch({ type: action.ADD_FILTERS });\r\n        dispatch({ type: action.ADD_AVG });\r\n    }\r\n    return (\r\n        <>\r\n            <Header>\r\n                <TextArea value={txt} onChange={handleChange} placeholder='Enter your JSON' />\r\n                <Avg>\r\n                    <label>HighAvg</label><input type='text' name='highAvg' value={store.highAvg} onChange={handleAvg} />\r\n                    <label>LowAvg</label><input type='text' name='lowAvg' value={store.lowAvg} onChange={handleAvg} />\r\n                    <label>Diff</label><input type='text' name='maxPer' value={store.maxPer} onChange={handleAvg} />\r\n                </Avg>\r\n                <Button onClick={handleSubmit} >Add</Button>\r\n            </Header>\r\n        </>\r\n    )\r\n};\r\nexport default Txt;","import { useState } from 'react';\r\nimport { Button } from './Styles/Txt';\r\nimport { useStore } from './store'\r\nimport action from './store/action';\r\n\r\nconst CompareDropDown = ({ handleChange }) => {\r\n    const [store] = useStore();\r\n    return (\r\n        <>\r\n            <select name='value' onChange={handleChange}>\r\n                <option value=''>Select</option>\r\n                {\r\n                    store.filtersList.map(filter => <option value={filter.label}>{filter.label}</option>)\r\n                }\r\n            </select>\r\n        </>\r\n    )\r\n}\r\nconst Rows = ({ rowNum, label, value, checked }) => {\r\n    const [store, dispatch] = useStore();\r\n    const [isCompare, setCompare] = useState(false);\r\n    const handleChange = (e) => {\r\n        let value = e.target.value;\r\n        const name = e.target.name;\r\n\r\n        if (name === \"checked\") {\r\n            value = !checked;\r\n        }\r\n        if (name === 'operator') {\r\n            if (value === 'GT' || value === 'LT') {\r\n                setCompare(true);\r\n            } else {\r\n                setCompare(false);\r\n            }\r\n            if (value === 'GTA' || value === 'LTA') {\r\n                dispatch({ type: action.UPD_FILTERS, data: { key: rowNum, col: 'value', value: Math.round(store.average[label].val / store.average[label].len) } })\r\n            } else {\r\n                dispatch({ type: action.UPD_FILTERS, data: { key: rowNum, col: 'value', value: '' } })\r\n            }\r\n        }\r\n        dispatch({ type: action.UPD_FILTERS, data: { key: rowNum, col: name, value: value } })\r\n        if ((name === 'operator' || name === 'value') && value) {\r\n            dispatch({ type: action.UPD_FILTERS, data: { key: rowNum, col: 'checked', value: true } })\r\n        }\r\n    }\r\n    return (\r\n        <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\", width: \"50%\", margin: \"10px\" }}>\r\n            <div>\r\n                <input type=\"checkbox\" onChange={handleChange} name='checked' checked={checked} />\r\n            </div>\r\n            <div style={{ width: '33%' }}>\r\n                <label>{label}</label>&nbsp;\r\n            </div>\r\n            <div style={{ width: '33%' }}>\r\n                <select name='operator' onChange={handleChange}>\r\n                    <option value=''>Select</option>\r\n                    <option value='>'>Greater</option>\r\n                    <option value='>='>Greater & Equal</option>\r\n                    <option value='<'>Less</option>\r\n                    <option value='<='>Less & equal</option>\r\n                    <option value='!='>Not equal</option>\r\n                    <option value='=='>Equal</option>\r\n                    <option value='GT'>Greater than</option>\r\n                    <option value='LT'>Less than</option>\r\n                    <option value='GTA'>Greater than AVG</option>\r\n                    <option value='LTA'>Less than AVG</option>\r\n                </select>\r\n            </div>\r\n            <div style={{ width: '33%' }}>\r\n                {!isCompare ? <input\r\n                    type=\"text\"\r\n                    placeholder='Value'\r\n                    name='value'\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    autoComplete='off'\r\n                /> : <CompareDropDown handleChange={handleChange} />}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nconst Filters = () => {\r\n    const [store, dispatch] = useStore();\r\n    const addToSearch = () => {\r\n        dispatch({ type: action.ADD_SEARCH });\r\n    }\r\n    return (\r\n        <>\r\n            <h5>Filters:</h5>\r\n            <div className='filters'>\r\n\r\n                {\r\n                    store.filtersList.map((filter, key) => <Rows label={filter.label} operator={filter.operator} value={filter.value} checked={filter.checked} key={key} rowNum={key}\r\n                    />)\r\n                }\r\n                <br />\r\n            </div>\r\n            <Button onClick={addToSearch} >Filter</Button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Filters;","import { useStore } from './store';\r\nimport TblView from './view/TblView';\r\n\r\nconst Tbl = () => {\r\n    const [store, dispatch] = useStore();\r\n    return (\r\n        <>\r\n            <TblView\r\n                average={store.average}\r\n                stocks={store.stocks}\r\n                dispatch={dispatch}\r\n                filtersCnt={store.filtersCnt}\r\n                searchParams={store.searchParams}\r\n                compare={store.compare}\r\n            />\r\n        </>\r\n    )\r\n}\r\nexport default Tbl;","import { useState } from \"react\";\r\nimport { findPerDiff } from './store/util';\r\n\r\nconst DiffList = ({ precentages }) => {\r\n    return (\r\n        <table style={{ width: \"10rem\", textAlign: \"left\" }}>\r\n\r\n            {\r\n                precentages.map((percentage) => {\r\n                    return (\r\n                        <tr>\r\n                            <td>{percentage.val}</td>\r\n                            <td>{Math.round(percentage.diff)}%</td>\r\n                        </tr>\r\n                    );\r\n                })\r\n            }\r\n\r\n\r\n        </table>\r\n    )\r\n}\r\n\r\nconst PercentageDiff = ({ label }) => {\r\n    const [vals, setVal] = useState('');\r\n    const [precentages, setPrecentages] = useState([]);\r\n    const values = vals.split(/\\s|%/).filter(v => v).map(v => v.split(',').join(''));\r\n    const onCalc = () => {\r\n        const per = values.reduce((acc, val, key) => {\r\n            let tmp = {\r\n                diff: 0,\r\n                val\r\n            };\r\n            if (key === 0) return [tmp];\r\n            tmp.diff = findPerDiff(val, values[key - 1]);\r\n            return [...acc, tmp];\r\n        }, []);\r\n\r\n        setPrecentages(per);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div style={{ margin: \"0 20px 0 0\" }}>\r\n                <h6>{label}</h6>\r\n                <input type=\"text\" onChange={e => setVal(e.target.value)} />\r\n                <button onClick={onCalc} >Calc</button>\r\n                <DiffList precentages={precentages} />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nconst AddDiff = () => {\r\n    const [cmps, setCmp] = useState([])\r\n    const addCmp = () => {\r\n        const label = prompt(`Enter diff name`);\r\n        if (!label) return;\r\n        setCmp([...cmps, { CmpName: PercentageDiff, label }])\r\n    }\r\n    return (\r\n        <div>\r\n            <h5>Calculate Diff:</h5>\r\n            <button onClick={addCmp}>Add</button>\r\n            <div style={{ display: \"flex\", width: '90%', flexWrap: \"wrap\" }}>\r\n                {cmps.map(cmp => {\r\n                    const { CmpName, label } = cmp;\r\n                    return <CmpName label={label} />\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default AddDiff;","import styled from 'styled-components';\r\n\r\n\r\nconst Container = styled.div`\r\nmargin:40px;\r\nposition:relative;\r\n`;\r\n\r\nexport {\r\n    Container\r\n}","import styled from 'styled-components';\r\n\r\n\r\nconst ModalContainer = styled.div`\r\n    position:absolute;\r\n    top:0;    \r\n    width:auto;\r\n    height:auto;\r\n    background:white;\r\n\r\n`;\r\n\r\nconst ModalContent = styled.div`\r\n`;\r\n\r\nexport {\r\n    ModalContainer,\r\n    ModalContent\r\n}","import { useStore } from './store';\r\nimport { ModalContainer, ModalContent } from './Styles/Modal';\r\nimport TblView from './view/TblView';\r\n\r\nconst Modal = ({ showModal }) => {\r\n    const [store, dispatch] = useStore();\r\n    const stocks = store.stocks.filter((stock, key) => {\r\n        return store.compare.indexOf(key) > -1 ? true : false;\r\n    })\r\n    return (\r\n        <>\r\n            <ModalContainer>\r\n                <ModalContent>\r\n                    <button onClick={showModal}>Close</button>\r\n                    <TblView\r\n                        average={store.average}\r\n                        stocks={stocks}\r\n                        dispatch={dispatch}\r\n                        filtersCnt={store.filtersCnt}\r\n                        searchParams={store.searchParams}\r\n                        compare={store.compare}\r\n                    />\r\n\r\n                </ModalContent>\r\n            </ModalContainer>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Modal;","import { useStore } from './../store';\r\nimport { useState } from 'react';\r\nimport { ModalContainer, ModalBody, ModalClose, Content } from './Style';\r\nimport { findPerDiff } from './../store/util';\r\nconst getPercentage = (stock, col1, col2) => {\r\n    return findPerDiff(stock[col1], stock[col2]);\r\n}\r\nconst findBest = (stocks, type) => {\r\n    const sortRoe = stocks.sort((a, b) => {\r\n        return parseFloat(b.filters[type]) - parseFloat(a.filters[type]);\r\n    });\r\n    return sortRoe.slice(0, 5);\r\n}\r\nconst findMaxMatch = (...arr) => {\r\n    return arr.reduce((acc, val, key) => {\r\n        const position = (key + 1) % 5;\r\n        const avgPos = position === 0 ? 5 : position;\r\n        if (acc[val.Name]) {\r\n            acc[val.Name].cnt += 1;\r\n            acc[val.Name].avgPos += avgPos;\r\n            acc[val.Name].t.push(avgPos);\r\n        } else {\r\n            acc[val.Name] = { cnt: 1, avgPos: avgPos, t: [position], name: val.Name };\r\n        }\r\n        return acc;\r\n    }, {});\r\n}\r\n\r\nconst sortByBest = (maxMatch) => {\r\n    const matches = Object.values(maxMatch);\r\n    return matches.sort(function (a, b) {\r\n        return b.cnt - a.cnt || a.avgPos - b.avgPos;\r\n    }).slice(0, 5);\r\n}\r\nconst addMetrics = function (stocks) {\r\n    stocks.forEach((stock, key) => {\r\n        stocks[key].filters.epsAnnGrowthPercent = getPercentage(stocks[key].filters, 'EPS12M', 'EPSAnnRs');\r\n        stocks[key].filters.epsPrevAnnGrowthPercent = getPercentage(stocks[key].filters, 'EPSAnnRs', 'EPSPrevAnnRs');\r\n        stocks[key].filters.epsPreYearQtrPercent = getPercentage(stocks[key].filters, 'EPSQtrRs', 'EPSPYQtrRs');\r\n        stocks[key].filters.epsPreQtrPercent = getPercentage(stocks[key].filters, 'EPSQtrRs', 'EPSPrevQtrRs');\r\n        stocks[key].filters.roePercent = getPercentage(stocks[key].filters, 'ROE', 'ROEPrevAnn');\r\n        stocks[key].filters.rocePercent = getPercentage(stocks[key].filters, 'ROCE', 'ROCEPrevYr');\r\n\r\n    });\r\n    return stocks;\r\n};\r\n\r\nconst filterStocks = (stocks) => {\r\n    const tmp = stocks.filter((stock) => {\r\n        /* if (stock.filters['MarkCap'] >= 10) {\r\n             return true;\r\n         }*/\r\n        return true;\r\n    });\r\n    return tmp;\r\n}\r\n\r\nconst grpBest = (stocks, cols) => {\r\n    const best = cols.map(col => {\r\n        return findBest(stocks, col);\r\n    });\r\n    const match = findMaxMatch(...best);\r\n    const sortByBest = sortByBest(match);\r\n    return [match, sortByBest];\r\n}\r\n\r\nconst calc = (stocks) => {\r\n    let stockObj = JSON.parse(JSON.stringify(stocks));\r\n    const filteredStocks = filterStocks(stockObj);\r\n    const parseStocks = addMetrics(filteredStocks);\r\n\r\n    //Current\r\n    const roe = findBest(parseStocks, 'ROE');\r\n    const roce = findBest(parseStocks, 'ROCE');\r\n    //const eps = findBest(parseStocks, 'EPS12M');\r\n    const saleGrowth = findBest(parseStocks, 'Salesgrowth');\r\n    const qtrSalesVar = findBest(parseStocks, 'QtrSalesVar'); // yoySales growth\r\n    const npmCur = findBest(parseStocks, 'NPMAnn'); // yoySales growth\r\n    const opmCur = findBest(parseStocks, 'OPM'); // yoySales growth\r\n\r\n\r\n    const currentMatch = findMaxMatch(\r\n        ...roe,\r\n        ...roce,\r\n        ...saleGrowth,\r\n        ...qtrSalesVar,\r\n        ...npmCur,\r\n        ...opmCur\r\n    );\r\n    const currentBest = sortByBest(currentMatch);\r\n    //const [currentMatch, currentBest] = grpBest(parseStocks, ['ROE', 'ROCE', 'EPS12M', 'Salesgrowth', 'QtrSalesVar']);\r\n    //History prev\r\n    const roePrevAnn = findBest(parseStocks, 'ROEPrevAnn');\r\n    const rocePrevYr = findBest(parseStocks, 'ROCEPrevYr');\r\n\r\n    const historyMatch = findMaxMatch(\r\n        ...roePrevAnn,\r\n        ...rocePrevYr\r\n    );\r\n    const histBest = sortByBest(historyMatch);\r\n\r\n    //EPS\r\n    /*  const eps12M = findBest(parseStocks, 'EPS12M'); // last 12 months.\r\n      const epsAnnPercent = findBest(parseStocks, 'EPSAnnRs'); // last fin year.\r\n      const epsPrevAnnPercent = findBest(parseStocks, 'EPSPrevAnnRs'); // prev fin year.\r\n      const epsQtr = findBest(parseStocks, 'EPSQtrRs'); // latest qtr\r\n      const epsPrevQtrPercent = findBest(parseStocks, 'EPSPrevQtrRs'); // prev qtr\r\n      const epsPrevYrQtrPercent = findBest(parseStocks, 'EPSPYQtrRs'); // prev yr qtr\r\n      const epsMatch = findMaxMatch(\r\n          ...eps12M,\r\n          ...epsAnnPercent,\r\n          ...epsPrevAnnPercent,\r\n          ...epsQtr,\r\n          ...epsPrevQtrPercent,\r\n          ...epsPrevYrQtrPercent\r\n      );\r\n      const epsBest = sortByBest(epsMatch);*/\r\n\r\n    //3Year avg\r\n    const roe3 = findBest(parseStocks, 'ROE3Yr');\r\n    const roce3 = findBest(parseStocks, 'ROCE3Yr');\r\n    const sales3 = findBest(parseStocks, 'SalesVar3Yrs');\r\n    const avg3Match = findMaxMatch(\r\n        ...roe3,\r\n        ...roce3,\r\n        ...sales3\r\n    );\r\n    const avg3Best = sortByBest(avg3Match);\r\n\r\n    //5Year avg\r\n    const roe5 = findBest(parseStocks, 'ROE5Yr');\r\n    const roce5 = findBest(parseStocks, 'ROCE5Yr');\r\n    const sales5 = findBest(parseStocks, 'SalesVar5Yrs');\r\n    const avg5Match = findMaxMatch(\r\n        ...roe5,\r\n        ...roce5,\r\n        ...sales5\r\n    );\r\n    const avg5Best = sortByBest(avg5Match);\r\n\r\n    const epsCmp12Mnth = findBest(parseStocks, 'epsAnnGrowthPercent'); // comparing last 12 months with last year\r\n    const epsCmp12MnthMatch = findMaxMatch(\r\n        ...epsCmp12Mnth\r\n    );\r\n    const epsCmp12MnthBest = sortByBest(epsCmp12MnthMatch);\r\n\r\n    const epsCmpLastYr = findBest(parseStocks, 'epsPrevAnnGrowth'); // comparing last year vs prev year\r\n    const epsCmpLastYrMatch = findMaxMatch(\r\n        ...epsCmpLastYr\r\n    );\r\n    const epsCmpLastYrBest = sortByBest(epsCmpLastYrMatch);\r\n\r\n    const epsCmpLastYrQtr = findBest(parseStocks, 'epsPreYearQtr');  // comparing latest qtr vs prev year qtr\r\n    const epsCmpLastYrQtrMatch = findMaxMatch(\r\n        ...epsCmpLastYrQtr\r\n    );\r\n    const epsCmpLastYrQtrBest = sortByBest(epsCmpLastYrQtrMatch);\r\n\r\n    const epsCmpPrevQtr = findBest(parseStocks, 'epsPreQtrPercent');  // comparing latest qtr vs prev qtr    \r\n    const epsCmpPrevQtrMatch = findMaxMatch(\r\n        ...epsCmpPrevQtr\r\n    );\r\n    const epsCmpPrevQtrBest = sortByBest(epsCmpPrevQtrMatch);\r\n\r\n    const roePercent = findBest(parseStocks, 'roePercent');\r\n    const roePercentMatch = findMaxMatch(\r\n        ...roePercent\r\n    );\r\n    const roePercentBest = sortByBest(roePercentMatch);\r\n\r\n    const rocePercent = findBest(parseStocks, 'rocePercent');\r\n    const rocePercentMatch = findMaxMatch(\r\n        ...rocePercent\r\n    );\r\n    const rocePercentBest = sortByBest(rocePercentMatch);\r\n\r\n    /* OPM */\r\n    const opmPercent = findBest(parseStocks, 'OPM'); // last 12 months\r\n    const opmAnnPercent = findBest(parseStocks, 'OPMAnn'); // last fin year\r\n    const opmPrevAnnPercent = findBest(parseStocks, 'OPMPrevAnn'); // prev fin year\r\n    const opmQtrPercent = findBest(parseStocks, 'OPMQtr'); // latest qtr\r\n    const opmPrevQtrPercent = findBest(parseStocks, 'OPMPrevQtr'); // prev qtr\r\n    const opmPrevYrQtrPercent = findBest(parseStocks, 'OPMPYQtr'); // prev yr qtr\r\n    const opmPercentMatch = findMaxMatch(\r\n        ...opmPercent,\r\n        ...opmAnnPercent,\r\n        ...opmPrevAnnPercent,\r\n        ...opmQtrPercent,\r\n        ...opmPrevQtrPercent,\r\n        ...opmPrevYrQtrPercent\r\n    );\r\n    const opmPercentBest = sortByBest(opmPercentMatch);\r\n\r\n    /* NPM */\r\n    const npmAnnPercent = findBest(parseStocks, 'NPMAnn'); // last fin year\r\n    const npmPrevAnnPercent = findBest(parseStocks, 'NPMPrevAnn'); // prev fin year\r\n    const npmQtrPercent = findBest(parseStocks, 'NPMQtr'); // latest qtr\r\n    const npmPrevQtrPercent = findBest(parseStocks, 'NPMPrevQtr'); // prev qtr\r\n    const npmPrevYrQtrPercent = findBest(parseStocks, 'NPMPYQtr'); // prev yr qtr\r\n    const npmPercentMatch = findMaxMatch(\r\n        ...npmAnnPercent,\r\n        ...npmPrevAnnPercent,\r\n        ...npmQtrPercent,\r\n        ...npmPrevQtrPercent,\r\n        ...npmPrevYrQtrPercent\r\n    );\r\n    const npmPercentBest = sortByBest(npmPercentMatch);\r\n\r\n    const allMatch = findMaxMatch(\r\n        ...roe,\r\n        ...roce,\r\n        ...saleGrowth,\r\n        ...qtrSalesVar,\r\n        ...roePrevAnn,\r\n        ...rocePrevYr,\r\n        ...roe3,\r\n        ...roce3,\r\n        ...sales3,\r\n        ...roe5,\r\n        ...roce5,\r\n        ...sales5,\r\n        ...epsCmp12Mnth,\r\n        ...epsCmpLastYr,\r\n        ...epsCmpLastYrQtr,\r\n        ...epsCmpPrevQtr,\r\n        ...roePercent,\r\n        ...rocePercent,\r\n        ...opmPercent,\r\n        ...opmAnnPercent,\r\n        ...opmPrevAnnPercent,\r\n        ...opmQtrPercent,\r\n        ...opmPrevQtrPercent,\r\n        ...opmPrevYrQtrPercent,\r\n        ...npmAnnPercent,\r\n        ...npmPrevAnnPercent,\r\n        ...npmQtrPercent,\r\n        ...npmPrevQtrPercent,\r\n        ...npmPrevYrQtrPercent\r\n    );\r\n    const finalBest = sortByBest(allMatch);\r\n    return {\r\n        currentBest,\r\n        histBest,\r\n        avg3Best,\r\n        avg5Best,\r\n        epsCmp12MnthBest,\r\n        epsCmpLastYrBest,\r\n        epsCmpLastYrQtrBest,\r\n        epsCmpPrevQtrBest,\r\n        roePercentBest,\r\n        rocePercentBest,\r\n        opmPercentBest,\r\n        npmPercentBest,\r\n        finalBest\r\n    };\r\n\r\n    //5Year avg\r\n    // Historic growth\r\n    // sales roe roce, cash\r\n}\r\nconst Tbl = ({ rows }) => {\r\n    return (\r\n        <table border=\"1\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Name</th>\r\n                    <th>Cnt</th>\r\n                    <th>Position</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {rows.map((row) => {\r\n                    return (\r\n                        <>\r\n                            <tr>\r\n                                <td>{row.name}</td>\r\n                                <td>{row.cnt}</td>\r\n                                <td>{row.avgPos}</td>\r\n                            </tr>\r\n                        </>\r\n                    );\r\n                })}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\nconst BestPick = () => {\r\n    const [openBestPick, setBestPic] = useState(false);\r\n    const [store] = useStore();\r\n    const {\r\n        currentBest,\r\n        histBest,\r\n        avg3Best,\r\n        avg5Best,\r\n        finalBest,\r\n        epsCmp12MnthBest,\r\n        epsCmpLastYrBest,\r\n        epsCmpLastYrQtrBest,\r\n        epsCmpPrevQtrBest,\r\n        roePercentBest,\r\n        rocePercentBest,\r\n        opmPercentBest,\r\n        npmPercentBest\r\n    } = calc(store.stocks);\r\n\r\n    return (\r\n        <>\r\n            <button onClick={e => setBestPic(!openBestPick)} >BestPick</button>\r\n            {\r\n                openBestPick && (<ModalContainer>\r\n                    <ModalBody>\r\n                        <ModalClose onClick={e => setBestPic(!openBestPick)} >X</ModalClose>\r\n                        <Content>\r\n                            <div>\r\n                                <h5>Current</h5>\r\n                                <Tbl rows={currentBest} />\r\n                            </div>\r\n                            <div>\r\n                                <h5>History</h5>\r\n                                <Tbl rows={histBest} />\r\n                            </div>\r\n                            <div>\r\n                                <h5>Avg 3 Years</h5>\r\n                                <Tbl rows={avg3Best} />\r\n                            </div>\r\n                            <div>\r\n                                <h5>Avg 5 Years</h5>\r\n                                <Tbl rows={avg5Best} />\r\n                            </div>\r\n\r\n\r\n                            <div>\r\n                                <h5>EPS12M vs Last yr</h5>\r\n                                <Tbl rows={epsCmp12MnthBest} />\r\n                            </div>\r\n                            <div>\r\n                                <h5>EPS last yr vs prev yr</h5>\r\n                                <Tbl rows={epsCmpLastYrBest} />\r\n                            </div>\r\n\r\n                            <div>\r\n                                <h5>Eps last qtr vs prev qtr</h5>\r\n                                <Tbl rows={epsCmpPrevQtrBest} />\r\n                            </div>\r\n\r\n                            <div>\r\n                                <h5>EPS prev yr qtr</h5>\r\n                                <Tbl rows={epsCmpLastYrQtrBest} />\r\n                            </div>\r\n\r\n                            <div>\r\n                                <h5>Roe vs prev yr</h5>\r\n                                <Tbl rows={roePercentBest} />\r\n                            </div>\r\n\r\n                            <div>\r\n                                <h5>Roce vs prev yr</h5>\r\n                                <Tbl rows={rocePercentBest} />\r\n                            </div>\r\n\r\n                            <div>\r\n                                <h5>OPM</h5>\r\n                                <Tbl rows={opmPercentBest} />\r\n                            </div>\r\n\r\n                            <div>\r\n                                <h5>NPM</h5>\r\n                                <Tbl rows={npmPercentBest} />\r\n                            </div>\r\n                            <div>\r\n                                <h5>Consolidated</h5>\r\n                                <Tbl rows={finalBest} />\r\n                            </div>\r\n                        </Content>\r\n                    </ModalBody>\r\n\r\n                </ModalContainer>)\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BestPick;","import { useState } from 'react';\r\nimport './App.css';\r\nimport Txt from './Txt';\r\nimport Filters from './Filters';\r\nimport Tbl from './Tbl';\r\nimport PercentageDiff from './PercentageDiff';\r\nimport { Container } from './Styles/Container'\r\nimport { Provider, useStore } from './store';\r\nimport Modal from './modal';\r\nimport BestPick from './bestPick';\r\nimport SortedStocks from './sort';\r\nfunction App() {\r\n  const [store] = useStore();\r\n  const [isModalOpen, setModalOpen] = useState(false);\r\n  const showModal = () => {\r\n    setModalOpen(!isModalOpen);\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <Txt />\r\n      {store.stocks && store.stocks.length > 0 && <Filters />}\r\n      {store.stocks && store.stocks.length > 0 && <h5>Filters added: {store.filtersCnt}</h5>}\r\n      {store.compare && store.compare.length > 1 && <button onClick={showModal} >Compare</button>}\r\n      {store.stocks && store.stocks.length > 0 && <BestPick />}\r\n      {store.stocks && store.stocks.length > 0 && <SortedStocks />}\r\n      {store.stocks && store.stocks.length > 0 && <Tbl />}\r\n      {isModalOpen && <Modal showModal={showModal} />}\r\n\r\n      <PercentageDiff />\r\n    </Container>\r\n  );\r\n}\r\n\r\n\r\nexport default () => {\r\n  return (\r\n    <Provider>\r\n      <App />\r\n    </Provider>\r\n  )\r\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}