{"version":3,"sources":["Styles/Txt.js","Txt.js","Filters.js","operators.js","Styles/Table.js","Tbl.js","PercentageDiff.js","Styles/Container.js","App.js","reportWebVitals.js","index.js"],"names":["TextArea","styled","textarea","Button","button","Header","div","Txt","value","setVal","onSubmit","onChange","e","target","placeholder","onClick","CompareDropDown","filtersList","handleChange","name","map","filter","label","Rows","rowNum","checked","updFilter","average","useState","isCompare","setCompare","Math","round","val","len","style","display","flexDirection","justifyContent","width","margin","type","autoComplete","Filters","addToSearch","className","key","operator","bind","search","a","b","parseFloat","Avg","table","Heading","th","stock","filters","cols","Object","keys","col","Col","searchParams","deleteStock","filtersCnt","updAvg","Name","cnt","colName","params","operators","processResult","matchCnt","percentage","background","color","calcPercent","props","Tbl","stocks","border","bold","DiffList","precentages","textAlign","diff","PercentageDiff","vals","setPrecentages","values","split","v","join","per","reduce","acc","newNum","orgNum","tmp","AddDiff","cmps","setCmp","prompt","CmpName","flexWrap","cmp","Container","App","txt","setTxt","setStocks","setFilters","setSearch","setFiltersCnt","setAverage","tmpStocks","JSON","parse","Array","isArray","length","tmpFilters","createFilters","avg","forEach","getAvg","alert","searchObj","num","parseNum","stringify","newStocks","slice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8f2a31fd.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\n\r\nconst TextArea = styled.textarea`\r\n    height:100px;\r\n`;\r\n\r\nconst Button = styled.button`\r\n    width:10%;\r\n    margin:10px 0 0 0;    \r\n`;\r\n\r\nconst Header = styled.div`\r\n    width:100%;\r\n    display:flex;\r\n    flex-direction:column;\r\n`;\r\n\r\nexport {\r\n    TextArea,\r\n    Button,\r\n    Header\r\n}","import { TextArea, Button, Header } from './Styles/Txt'\r\nconst Txt = ({ value, setVal, onSubmit }) => {\r\n    return (\r\n        <>\r\n            <Header>\r\n                <TextArea value={value} onChange={(e) => setVal(e.target.value)} placeholder='Enter your JSON' />\r\n                <Button onClick={onSubmit} >Add</Button>\r\n            </Header>\r\n        </>\r\n    )\r\n};\r\nexport default Txt;","import { useState } from 'react';\r\nimport { Button } from './Styles/Txt';\r\n\r\nconst CompareDropDown = ({ filtersList, handleChange }) => {\r\n    return (\r\n        <>\r\n            <select name='value' onChange={handleChange}>\r\n                <option value=''>Select</option>\r\n                {\r\n                    filtersList.map(filter => <option value={filter.label}>{filter.label}</option>)\r\n                }\r\n            </select>\r\n        </>\r\n    )\r\n}\r\nconst Rows = ({ rowNum, label, value, checked, updFilter, filtersList, average }) => {\r\n    const [isCompare, setCompare] = useState(false);\r\n    const handleChange = (e) => {\r\n        let value = e.target.value;\r\n        const name = e.target.name;\r\n\r\n        if (name === \"checked\") {\r\n            value = !checked;\r\n        }\r\n        if (name === 'operator') {\r\n            if (value === 'GT' || value === 'LT') {\r\n                setCompare(true);\r\n            } else {\r\n                setCompare(false);\r\n            }\r\n            if (value === 'GTA' || value === 'LTA') {\r\n                updFilter(rowNum, 'value', Math.round(average.[label].val / average[label].len));\r\n            } else {\r\n                updFilter(rowNum, 'value', '');\r\n            }\r\n        }\r\n\r\n        updFilter(rowNum, name, value);\r\n        if ((name === 'operator' || name === 'value') && value) {\r\n            updFilter(rowNum, 'checked', true);\r\n        }\r\n    }\r\n    return (\r\n        <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\", width: \"50%\", margin: \"10px\" }}>\r\n            <div>\r\n                <input type=\"checkbox\" onChange={handleChange} name='checked' checked={checked} />\r\n            </div>\r\n            <div style={{ width: '33%' }}>\r\n                <label>{label}</label>&nbsp;\r\n            </div>\r\n            <div style={{ width: '33%' }}>\r\n                <select name='operator' onChange={handleChange}>\r\n                    <option value=''>Select</option>\r\n                    <option value='>'>Greater</option>\r\n                    <option value='>='>Greater & Equal</option>\r\n                    <option value='<'>Less</option>\r\n                    <option value='<='>Less & equal</option>\r\n                    <option value='!='>Not equal</option>\r\n                    <option value='=='>Equal</option>\r\n                    <option value='GT'>Greater than</option>\r\n                    <option value='LT'>Less than</option>\r\n                    <option value='GTA'>Greater than AVG</option>\r\n                    <option value='LTA'>Less than AVG</option>\r\n                </select>\r\n            </div>\r\n            <div style={{ width: '33%' }}>\r\n                {!isCompare ? <input\r\n                    type=\"text\"\r\n                    placeholder='Value'\r\n                    name='value'\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    autoComplete='off'\r\n                /> : <CompareDropDown filtersList={filtersList} handleChange={handleChange} />}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nconst Filters = ({ filtersList, updFilter, addToSearch, average }) => {\r\n    return (\r\n        <>\r\n            <h5>Filters:</h5>\r\n            <div className='filters'>\r\n\r\n                {\r\n                    filtersList.map((filter, key) => <Rows average={average} label={filter.label} operator={filter.operator} value={filter.value} checked={filter.checked} key={key} rowNum={key} updFilter={updFilter} filtersList={filtersList} />)\r\n                }\r\n                <br />\r\n            </div>\r\n            <Button onClick={addToSearch.bind(null, filtersList)} >Filter</Button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Filters;","const search = {\r\n    '>': (a, b) => (parseFloat(a) > parseFloat(b)),\r\n    '>=': (a, b) => (parseFloat(a) >= parseFloat(b)),\r\n    '<': (a, b) => (parseFloat(a) < parseFloat(b)),\r\n    '<=': (a, b) => (parseFloat(a) <= parseFloat(b)),\r\n    '!=': (a, b) => (parseFloat(a) != parseFloat(b)),\r\n    '==': (a, b) => (parseFloat(a) == parseFloat(b)),\r\n    'GT': (a, b) => (parseFloat(a) >= parseFloat(b)),\r\n    'LT': (a, b) => (parseFloat(a) <= parseFloat(b)),\r\n    'GTA': (a, b) => (parseFloat(a) >= parseFloat(b)),\r\n    'LTA': (a, b) => (parseFloat(a) <= parseFloat(b)),\r\n}\r\n\r\nexport default search","import styled from 'styled-components';\r\n\r\n\r\nconst Table = styled.table`\r\nborder:1px solid;\r\n`;\r\n\r\nconst Avg = styled.div`\r\n    background: skyblue;\r\n    border-radius:50%;\r\n    font-size:9px;\r\n`\r\nconst Th = styled.th``;\r\nconst TD = styled.th``;\r\n\r\nexport {\r\n    Table,\r\n    Avg\r\n\r\n}","import operators from './operators';\r\nimport { Avg } from './Styles/Table';\r\nconst Heading = ({ stock, average }) => {\r\n    const { filters } = stock;\r\n    const cols = Object.keys(filters);\r\n    return (\r\n        <>\r\n            <th>StockName</th>\r\n            {cols.map(col => <th>{col}<Avg>{(Math.round(average[col].val / average[col].len))}</Avg></th>)}\r\n            <th>Matches</th>\r\n            <th>Action</th>\r\n        </>\r\n    )\r\n}\r\n\r\nconst Col = ({ stock, searchParams, deleteStock, rowNum, filtersCnt, updAvg }) => {\r\n\r\n    const { Name, filters } = stock;\r\n    const cols = Object.keys(filters);\r\n    const calcPercent = (matchCnt) => {\r\n        if (filtersCnt <= 0) return;\r\n        const percentage = ((matchCnt / filtersCnt) * 100);\r\n        if (percentage >= 90) {\r\n            return { background: 'green', color: 'rgb(255,255,255)' };\r\n        } else if (percentage >= 80) {\r\n            return { background: 'lightgreen', color: 'rgb(255,255,255)' };\r\n        } else if (percentage >= 70) {\r\n            return { background: 'skyblue', color: 'rgb(255,255,255)' };\r\n        } else if (percentage >= 60) {\r\n            return { background: 'orange', color: 'rgb(255,255,255)' };\r\n        } else if (percentage >= 50) {\r\n            return { background: 'yellow', color: 'rgb(255,255,255)' };\r\n        } else {\r\n            return { background: 'red', color: 'rgb(255,255,255)' };\r\n        }\r\n    }\r\n    let cnt = 0;\r\n    const processResult = (colName) => {\r\n        const params = searchParams[colName];\r\n\r\n        if (params && operators[params.operator]) {\r\n            const value = (params.operator === 'LT' || params.operator === 'GT') ? (filters[params.value] || 0) : params.value;\r\n            const className = operators[params.operator](filters[colName], value) ? 'greenCol' : 'redCol';\r\n            if (className === 'greenCol') {\r\n                cnt++;\r\n            }\r\n            return className;\r\n        }\r\n        return;\r\n    }\r\n    const handleChange = (e) => {\r\n        const { checked, value, name } = e.target;\r\n        if (checked) {\r\n            updAvg('sub', name, value);\r\n        } else {\r\n            updAvg('add', name, value);\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <td>{Name}</td>\r\n            {\r\n                cols.map((col, key) => {\r\n                    const className = processResult(col, key) || '';\r\n                    return (<td className={className} >\r\n                        <input type=\"checkbox\" name={col} value={filters[col]} onChange={handleChange} />\r\n                        {filters[col]}\r\n                    </td>);\r\n                })\r\n            }\r\n            <td style={calcPercent(cnt)}>{cnt}</td>\r\n            <td><button onClick={deleteStock.bind(null, rowNum)}>Delete</button></td>\r\n        </>\r\n    )\r\n}\r\nconst Rows = (props) => {\r\n    return (\r\n        <>\r\n            <tr>\r\n                <Col {...props} />\r\n            </tr>\r\n        </>\r\n    )\r\n}\r\n\r\nconst Tbl = ({ stocks, searchParams, deleteStock, average, filtersCnt, updAvg }) => {\r\n    return (\r\n        <>\r\n            <table border=\"1\">\r\n                <thead>\r\n                    <tr>\r\n                        <Heading average={average} stock={stocks[0]} />\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {stocks.map((stock, rowNum) => <Rows updAvg={updAvg} filtersCnt={filtersCnt} stock={stock} searchParams={searchParams} rowNum={rowNum} deleteStock={deleteStock} />)}\r\n                </tbody>\r\n                <thead>\r\n                    <tr bold=\"1\">\r\n                        <Heading average={average} stock={stocks[0]} />\r\n                    </tr>\r\n                </thead>\r\n            </table>\r\n        </>\r\n    )\r\n}\r\nexport default Tbl;","import { useState } from \"react\";\r\nconst findPerDiff = (newNum, orgNum) => {\r\n    return ((newNum - orgNum) / orgNum) * 100;\r\n}\r\n\r\nconst DiffList = ({ precentages }) => {\r\n    return (\r\n        <table style={{ width: \"10rem\", textAlign: \"left\" }}>\r\n\r\n            {\r\n                precentages.map((percentage) => {\r\n                    return (\r\n                        <tr>\r\n                            <td>{percentage.val}</td>\r\n                            <td>{Math.round(percentage.diff)}%</td>\r\n                        </tr>\r\n                    );\r\n                })\r\n            }\r\n\r\n\r\n        </table>\r\n    )\r\n}\r\n\r\nconst PercentageDiff = ({ label }) => {\r\n    const [vals, setVal] = useState('');\r\n    const [precentages, setPrecentages] = useState([]);\r\n    const values = vals.split(/\\s|%/).filter(v => v).map(v => v.split(',').join(''));\r\n    const onCalc = () => {\r\n        const per = values.reduce((acc, val, key) => {\r\n            let tmp = {\r\n                diff: 0,\r\n                val\r\n            };\r\n            if (key === 0) return [tmp];\r\n            tmp.diff = findPerDiff(val, values[key - 1]);\r\n            return [...acc, tmp];\r\n        }, []);\r\n\r\n        setPrecentages(per);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div style={{ margin: \"0 20px 0 0\" }}>\r\n                <h6>{label}</h6>\r\n                <input type=\"text\" onChange={e => setVal(e.target.value)} />\r\n                <button onClick={onCalc} >Calc</button>\r\n                <DiffList precentages={precentages} />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nconst AddDiff = () => {\r\n    const [cmps, setCmp] = useState([])\r\n    const addCmp = () => {\r\n        const label = prompt(`Enter diff name`);\r\n        if (!label) return;\r\n        setCmp([...cmps, { CmpName: PercentageDiff, label }])\r\n    }\r\n    return (\r\n        <div>\r\n            <h5>Calculate Diff:</h5>\r\n            <button onClick={addCmp}>Add</button>\r\n            <div style={{ display: \"flex\", width: '90%', flexWrap: \"wrap\" }}>\r\n                {cmps.map(cmp => {\r\n                    const { CmpName, label } = cmp;\r\n                    return <CmpName label={label} />\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default AddDiff;","import styled from 'styled-components';\r\n\r\n\r\nconst Container = styled.div`\r\nmargin:40px;\r\nposition:relative;\r\n`;\r\n\r\nexport {\r\n    Container\r\n}","import './App.css';\nimport Txt from './Txt';\nimport Filters from './Filters';\nimport { useState } from 'react';\nimport Tbl from './Tbl';\nimport PercentageDiff from './PercentageDiff';\nimport { Container } from './Styles/Container'\n\nfunction App() {\n  const [txt, setTxt] = useState('');\n  const [stocks, setStocks] = useState([]);\n  const [filtersList, setFilters] = useState([]);\n  const [searchParams, setSearch] = useState({});\n  const [filtersCnt, setFiltersCnt] = useState(0);\n  const [average, setAverage] = useState(0);\n  const updFilter = (key, col, value) => {\n    const tmp = [...filtersList];\n    tmp[key][col] = value;\n    setFilters(tmp);\n  }\n\n  const addToSearch = (filters) => {\n    let cnt = 0;\n    const searchObj = filters.reduce((acc, val) => {\n      if (val.checked) {\n        cnt++;\n        let tmp = {\n          [val.label]: {\n            value: val.value,\n            operator: val.operator,\n          }\n        };\n        return { ...acc, ...tmp };\n      }\n      return acc;\n    }, {});\n    setFiltersCnt(cnt);\n    setSearch(searchObj);\n  }\n\n  const createFilters = (stocks) => {\n    if (stocks?.length) {\n      const firstRow = Object.keys(stocks[0].filters);\n      const tmpFilters = firstRow.map((key) => {\n        return {\n          label: key,\n          value: '',\n          operator: '',\n          checked: false\n        }\n      });\n      setFilters(tmpFilters);\n    } else {\n      setFilters([]);\n    }\n  }\n  const getAvg = (stocks) => {\n    if (Array.isArray(stocks) && stocks?.length) {\n      let avg = {};\n      stocks.forEach(stock => {\n        const { filters } = stock;\n        Object.keys(filters).forEach(filter => {\n          avg[filter] = { val: parseFloat(avg[filter]?.val || 0) + parseFloat(filters[filter] || 0), len: stocks.length };\n        });\n\n      });\n      setAverage(avg);\n    }\n  }\n\n  const updAvg = (type, filter, num) => {\n    const parseNum = parseFloat(num) || 0;\n    let tmp = JSON.parse(JSON.stringify(average));\n    tmp[filter].val = type === 'sub' ? (tmp[filter].val - (parseNum)) : (parseFloat(tmp[filter].val) + parseNum);\n    tmp[filter].len = type === 'sub' ? (tmp[filter].len - 1) : (parseFloat(tmp[filter].len) + 1);\n    setAverage(tmp);\n  }\n  const parseStocks = () => {\n    try {\n      let tmpStocks = JSON.parse(txt);\n      if (!Array.isArray(tmpStocks)) { tmpStocks = [tmpStocks] }\n      setStocks(tmpStocks);\n      createFilters(tmpStocks);\n      getAvg(tmpStocks);\n    } catch (e) {\n      alert(\"Invlaid JSON\")\n    }\n  }\n\n  const deleteStock = (key) => {\n    const newStocks = [...stocks.slice(0, key), ...stocks.slice(key + 1)]\n    setStocks(newStocks);\n  }\n  return (\n    <Container>\n      <Txt value={txt} setVal={setTxt} onSubmit={parseStocks} />\n      {stocks && stocks.length > 0 && <Filters average={average} filtersList={filtersList} updFilter={updFilter} addToSearch={addToSearch} />}\n      {stocks && stocks.length > 0 && <h5>Filters added: {filtersCnt}</h5>}\n      {stocks && stocks.length > 0 && <Tbl updAvg={updAvg} average={average} stocks={stocks} searchParams={searchParams} deleteStock={deleteStock} filtersCnt={filtersCnt} />}\n      <PercentageDiff />\n    </Container>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}