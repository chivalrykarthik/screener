{"version":3,"sources":["sort/index.js","store/action.js","store/store.js","store/index.js","store/util.js","Styles/Container.js","Styles/Txt.js","Txt.js","Filters.js","Tbl.js","PercentageDiff.js","Styles/Modal.js","modal.js","bestPick/index.js","Screener.js","charts/chart.js","charts/util.js","charts/hooks/useLoadFile.js","charts/index.js","App.js","reportWebVitals.js","index.js","bestPick/Style.js","operators.js","Styles/Table.js","constants.js","view/TblView.js","sort/constants.js"],"names":["round5","num","n","Math","abs","Number","diff","res","addRank","store","rankCols","fields","i","field","split","col","isAsc","length","stocks","sort","a","b","filters","v1","v2","parseFloat","desc","sortStocks","sortByCol","avg","asc","isRound","map","colOrder","colList","cols","rm","includes","order","join","eval","SortedStocks","useState","openSort","setSort","colsOrder","sortList","setSortList","sortBy","setSortBy","rankList","setRankList","rankBy","setRankBy","useStore","tmpStore","JSON","parse","stringify","stocksRank","average","onClick","e","type","value","onChange","target","Array","isArray","dispatch","filtersCnt","searchParams","compare","action","ADD_TEXT","ADD_STOCKS","ADD_FILTERS","ADD_AVG","ADD_SEARCH","UPD_FILTERS","UPD_AVG","DELETE_STOCK","DELETE_STOCKS","UPD_HIGH_AVG","UPD_LOW_AVG","UPD_MAX_PER","UPD_STOCKS","ADD_TO_COMPARE","initialState","txt","highAvg","lowAvg","maxPer","filtersList","reducer","state","data","parseStocks","createFilters","getAvg","addToSearch","cnt","searchObj","updFilters","updFilter","key","updAverage","updAvg","updStock","deleteStock","updStocks","deleteStocks","ScreenContext","createContext","Provider","children","useReducer","useContext","tmpStocks","forEach","_","k","id","alert","Object","keys","label","operator","checked","exclude","hightAvg","valueAr","stock","filter","val","len","concat","removeOddVal","reduce","acc","tmp","updType","parseNum","slice","findPerDiff","newNum","orgNum","findPercentage","values","arr","max","ceil","firstChunk","reverse","lastChunk","firstPercentage","lastPercentage","firstPos","findIndex","fp","lastPos","Container","styled","div","props","showChart","Header","TextArea","textarea","Button","button","Avg","Txt","handleAvg","name","placeholder","CompareDropDown","handleChange","Rows","rowNum","isCompare","setCompare","round","style","display","flexDirection","justifyContent","width","margin","autoComplete","Filters","className","Tbl","TblView","DiffList","precentages","textAlign","percentage","PercentageDiff","vals","setVal","setPrecentages","v","per","AddDiff","cmps","setCmp","prompt","CmpName","flexWrap","cmp","ModalContainer","ModalContent","Modal","showModal","indexOf","getPercentage","col1","col2","findBest","findMaxMatch","position","avgPos","Name","t","push","sortByBest","maxMatch","calc","epsAnnGrowthPercent","epsPrevAnnGrowthPercent","epsPreYearQtrPercent","epsPreQtrPercent","roePercent","rocePercent","addMetrics","filterStocks","roe","roce","saleGrowth","qtrSalesVar","npmCur","opmCur","currentMatch","currentBest","roePrevAnn","rocePrevYr","historyMatch","histBest","roe3","roce3","sales3","avg3Match","avg3Best","roe5","roce5","sales5","avg5Match","avg5Best","epsCmp12Mnth","epsCmp12MnthMatch","epsCmp12MnthBest","epsCmpLastYr","epsCmpLastYrMatch","epsCmpLastYrBest","epsCmpLastYrQtr","epsCmpLastYrQtrMatch","epsCmpLastYrQtrBest","epsCmpPrevQtr","epsCmpPrevQtrMatch","epsCmpPrevQtrBest","roePercentMatch","roePercentBest","rocePercentMatch","rocePercentBest","opmPercent","opmAnnPercent","opmPrevAnnPercent","opmQtrPercent","opmPrevQtrPercent","opmPrevYrQtrPercent","opmPercentMatch","opmPercentBest","npmAnnPercent","npmPrevAnnPercent","npmQtrPercent","npmPrevQtrPercent","npmPrevYrQtrPercent","npmPercentMatch","npmPercentBest","allMatch","finalBest","rows","border","row","BestPick","openBestPick","setBestPic","Screener","isModalOpen","setModalOpen","generateRandomColor","color","floor","random","Chart","uniqYear","yAxis","axis","parseInt","LineChart","height","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","domain","Tooltip","Legend","year","Line","stroke","loadData","yr","index","reqIndex","axios","get","useLoadFile","setData","chartData","setChartDat","setYear","noOfDays","setNoOfDays","processData","dt","tmpChartData","tmpData","startingPrice","replace","trim","date","open","day","month","toFixed","clearLast","pop","Charts","selectedYear","setSelectedYear","setYAxis","setIndex","compareData","setCompareData","handleIndex","result","handleSelect","loadFile","preventDefault","reader","FileReader","onload","text","readAsText","files","isChecked","bind","from","App","setChart","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","ModalBody","ModalClose","Content","search","table","COLOR","th","ABOVE_NINTY","background","ABOVE_EIGHTY","ABOVE_SEVENTY","ABOVE_SIXTY","ABOVE_FIFTY","BELOW_FIFTY","Heading","selectAll","isAscending","setAscending","sortTable","CheckCmp","setChecked","useEffect","Col","isHighlight","setHighlight","colName","params","operators","processResult","matchCnt","calcPercent","selectedRow","selectedIds","setSelectedId","isSelectAll","setSelectAll","allIds","bold","eps","npm","opm","sales","cashFlow","debt","pe","ey","qqp","qqs","yyp","yys","r","er","rr"],"mappings":"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","file":"static/js/main.4f80ecca.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport { useStore } from './../store';\r\nimport TblView from './../view/TblView';\r\nimport { cols, colsOrder, rankCols } from './constants'\r\nimport { ModalContainer, ModalBody, ModalClose, Content } from './../bestPick/Style';\r\n\r\n\r\nconst round5 = (num) => {\r\n    if (!num) num = 0;\r\n    let n = num < 0 ? Math.abs(num) : Number(num);\r\n    const diff = n % 5;\r\n    const res = diff >= 3 ? n + (5 - diff) : n - diff;\r\n    const a = num < 0 ? Number(-res) : Number(res);\r\n    return a;\r\n}\r\n\r\nconst addRank = (store, rankCols) => {\r\n    const fields = rankCols;\r\n    const asc = (v1, v2) => parseFloat(v1) - parseFloat(v2);\r\n    const desc = (v1, v2) => parseFloat(v2) - parseFloat(v1);\r\n    for (let i = 0; i < fields.length; i++) {\r\n        const field = fields[i].split('#');\r\n        const col = field[0];\r\n        const isAsc = field.length > 1 ? true : false;\r\n        store.stocks.sort((a, b) => isAsc && a.filters[col] > 0 && b.filters[col] > 0 ? asc(a.filters[col], b.filters[col]) : desc(a.filters[col], b.filters[col]));\r\n        for (let i = 0; i < store.stocks.length; i++) {\r\n            store.stocks[i].filters['Rank'] = (store.stocks[i].filters['Rank'] || 0) + (i + 1);\r\n            store.stocks[i].filters[col + 'Rank'] = i + 1;\r\n        }\r\n    }\r\n\r\n    return store;\r\n}\r\n\r\nconst sortStocks = (stocks, sortByCol, avg) => {\r\n    const asc = (v1, v2, isRound) => isRound ? round5(v1) - round5(v2) : v1 - v2;\r\n    const desc = (v1, v2, isRound) => isRound ? round5(v2) - round5(v1) : v2 - v1;\r\n\r\n    return stocks.sort((a, b) => {\r\n        const res = sortByCol.map((colOrder) => {\r\n            const colList = cols[colOrder];\r\n            return colList.cols.map((col) => {\r\n                if (avg[col]\r\n                    && (avg[col].rm.includes(parseFloat(a.filters[col])) || avg[col].rm.includes(parseFloat(b.filters[col])))) {\r\n                    return 0;\r\n                }\r\n                if (colList.order === \"asc\") {\r\n                    return asc(a.filters[col], b.filters[col]);\r\n                } else {\r\n                    return desc(a.filters[col], b.filters[col]);\r\n                }\r\n            }).join('||');\r\n\r\n        }).join('||');\r\n\r\n        return eval(res);\r\n    });\r\n}\r\n\r\nconst SortedStocks = () => {\r\n    const [openSort, setSort] = useState(false);\r\n    const [sortList, setSortList] = useState(colsOrder);\r\n    const [sortBy, setSortBy] = useState(colsOrder);\r\n    const [rankList, setRankList] = useState(rankCols);\r\n    const [rankBy, setRankBy] = useState(rankCols);\r\n    const [store] = useStore();\r\n    const tmpStore = JSON.parse(JSON.stringify(store));\r\n    const stocksRank = addRank(tmpStore, rankBy);\r\n    const stocks = sortStocks(stocksRank.stocks, sortBy, stocksRank.average);\r\n    const handleChange = e => setSortList(e.target.value);\r\n    const handleRank = e => setRankList(e.target.value);\r\n    const onSort = () => setSortBy(Array.isArray(sortList) ? sortList : sortList.split(','));\r\n    const onRank = () => setRankBy(Array.isArray(rankList) ? rankList : rankList.split(','));\r\n    return (\r\n        <>\r\n            <button onClick={e => setSort(!openSort)} >Sort</button>\r\n            {\r\n                openSort && (<ModalContainer>\r\n                    <ModalBody>\r\n                        <ModalClose onClick={e => setSort(!openSort)} >X</ModalClose>\r\n                        <Content>\r\n                            <div>\r\n                                <input type=\"text\" value={sortList} onChange={handleChange} /> <button onClick={onSort} >Sort</button>\r\n                                <input type=\"text\" value={rankList} onChange={handleRank} /> <button onClick={onRank} >Rank</button>\r\n                                <TblView\r\n                                    average={stocksRank.average}\r\n                                    stocks={stocks}\r\n                                    dispatch={() => { }}\r\n                                    filtersCnt={stocksRank.filtersCnt}\r\n                                    searchParams={stocksRank.searchParams}\r\n                                    compare={stocksRank.compare}\r\n                                />\r\n                            </div>\r\n                        </Content>\r\n                    </ModalBody>\r\n                </ModalContainer>)\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SortedStocks;\r\n","const action = {\r\n    ADD_TEXT: 'ADD_TEXT',\r\n    ADD_STOCKS: 'ADD_STOCKS',\r\n    ADD_FILTERS: 'ADD_FILTERS',\r\n    ADD_AVG: 'ADD_AVG',\r\n    ADD_SEARCH: 'ADD_SEARCH',\r\n    UPD_FILTERS: 'UPD_FILTERS',\r\n    UPD_AVG: 'UPD_AVG',\r\n    DELETE_STOCK: 'DELETE_STOCK',\r\n    DELETE_STOCKS: 'DELETE_STOCKS',\r\n    UPD_HIGH_AVG: 'UPD_HIGH_AVG',\r\n    UPD_LOW_AVG: 'UPD_LOW_AVG',\r\n    UPD_MAX_PER: 'UPD_MAX_PER',\r\n    UPD_STOCKS: 'UPD_STOCKS',\r\n    ADD_TO_COMPARE: 'ADD_TO_COMPARE'\r\n}\r\n\r\nexport default action;","import {\r\n    parseStocks,\r\n    createFilters,\r\n    getAvg,\r\n    addToSearch,\r\n    updFilter,\r\n    updAvg,\r\n    deleteStock,\r\n    deleteStocks\r\n} from './util';\r\nexport const initialState = {\r\n    txt: '',\r\n    highAvg: 100,\r\n    lowAvg: 100,\r\n    maxPer: 10,\r\n    stocks: [],\r\n    filtersList: [],\r\n    average: {},\r\n    searchParams: {},\r\n    filtersCnt: 0,\r\n    compare: []\r\n};\r\n\r\n\r\nexport const reducer = (state, action) => {\r\n    const { type, data } = action;\r\n    switch (type) {\r\n        case \"ADD_TEXT\":\r\n            return { ...state, txt: data.txt };\r\n        case \"ADD_STOCKS\":\r\n            const stocks = parseStocks(state.txt);\r\n            return {\r\n                ...state, stocks: stocks, filtersList: [], filtersList: [],\r\n                average: {},\r\n                searchParams: {},\r\n                filtersCnt: 0\r\n            };\r\n        case \"ADD_FILTERS\":\r\n            const filters = createFilters(state.stocks);\r\n            return { ...state, filtersList: filters };\r\n        case \"ADD_AVG\":\r\n            const avg = getAvg(state.stocks, state.maxPer, state.highAvg, state.lowAvg);\r\n            return { ...state, average: avg };\r\n        case \"ADD_SEARCH\":\r\n            const { cnt, searchObj } = addToSearch(state.filtersList);\r\n            return { ...state, searchParams: searchObj, filtersCnt: cnt };\r\n        case \"UPD_FILTERS\":\r\n            const updFilters = updFilter(state.filtersList, data.key, data.col, data.value);\r\n            return { ...state, filtersList: updFilters };\r\n        case \"UPD_AVG\":\r\n            const updAverage = updAvg({ ...data, average: state.average });\r\n            return { ...state, average: updAverage };\r\n        case \"DELETE_STOCK\":\r\n            const updStock = deleteStock(data.key, state.stocks);\r\n            return { ...state, stocks: updStock };\r\n        case \"DELETE_STOCKS\":\r\n            const updStocks = deleteStocks(data.key, state.stocks);\r\n            return { ...state, stocks: updStocks };\r\n        case \"UPD_HIGH_AVG\":\r\n            return { ...state, highAvg: data.value };\r\n        case \"UPD_LOW_AVG\":\r\n            return { ...state, lowAvg: data.value };\r\n        case \"UPD_MAX_PER\":\r\n            return { ...state, maxPer: data.value };\r\n        case \"UPD_STOCKS\":\r\n            return { ...state, stocks: data.stocks };\r\n        case \"ADD_TO_COMPARE\":\r\n            return { ...state, compare: data.compare };\r\n        default:\r\n            return state;\r\n    }\r\n}","import React, { useReducer, useContext, createContext } from 'react';\r\nimport { reducer, initialState } from './store';\r\nexport let ScreenContext = createContext({});\r\nexport const Provider = ({ children }) => {\r\n    let store = useReducer(reducer, initialState);\r\n    return (\r\n        <ScreenContext.Provider value={store}>\r\n            {children}\r\n        </ScreenContext.Provider>\r\n    )\r\n};\r\n\r\n\r\nexport const useStore = () => {\r\n    let store = useContext(ScreenContext);\r\n    return store;\r\n}","export const parseStocks = (txt) => {\r\n    try {\r\n        let tmpStocks = JSON.parse(txt);\r\n        if (!Array.isArray(tmpStocks)) { tmpStocks = [tmpStocks] }\r\n        tmpStocks.forEach((_, k) => tmpStocks[k].id = k + 1);\r\n        return tmpStocks;\r\n    } catch (e) {\r\n        alert(\"Invlaid JSON\")\r\n    }\r\n}\r\n\r\nexport const createFilters = (stocks) => {\r\n    if (stocks?.length) {\r\n        const firstRow = Object.keys(stocks[0].filters);\r\n        const tmpFilters = firstRow.map((key) => {\r\n            return {\r\n                label: key,\r\n                value: '',\r\n                operator: '',\r\n                checked: false,\r\n                exclude: []\r\n            }\r\n        });\r\n        return tmpFilters;\r\n    } else {\r\n        return [];\r\n    }\r\n}\r\n\r\nexport const getAvg = (stocks, maxPer = 10, hightAvg = 100, lowAvg = 100) => {\r\n    if (Array.isArray(stocks) && stocks?.length) {\r\n        let avg = {};\r\n        let valueAr = {};\r\n        stocks.forEach(stock => {\r\n            const { filters } = stock;\r\n            Object.keys(filters).forEach(filter => {\r\n                const val = parseFloat(avg[filter]?.val || 0) + parseFloat(filters[filter] || 0);\r\n                const len = filters[filter] != '' ? (avg[filter]?.len || 0) + 1 : avg[filter]?.len;\r\n                if (filters[filter] != '') {\r\n                    valueAr[filter] = (valueAr[filter] || []).concat(parseFloat(filters[filter]));\r\n                }\r\n                avg[filter] = { val, len };\r\n            });\r\n        });\r\n        Object.keys(valueAr).forEach(filter => {\r\n            valueAr[filter].sort((a, b) => a - b);\r\n            const rm = removeOddVal(valueAr[filter], maxPer, hightAvg, lowAvg);\r\n            rm.forEach(val => {\r\n                avg[filter].val -= val\r\n                avg[filter].len--;\r\n            });\r\n            avg[filter].rm = rm;\r\n        });\r\n        return avg;\r\n    }\r\n}\r\n\r\nexport const addToSearch = (filters) => {\r\n    let cnt = 0;\r\n    const searchObj = filters.reduce((acc, val) => {\r\n        if (val.checked) {\r\n            cnt++;\r\n            let tmp = {\r\n                [val.label]: {\r\n                    value: val.value,\r\n                    operator: val.operator,\r\n                }\r\n            };\r\n            return { ...acc, ...tmp };\r\n        }\r\n        return acc;\r\n    }, {});\r\n    return {\r\n        cnt,\r\n        searchObj\r\n    };\r\n}\r\n\r\nexport const updFilter = (filtersList, key, col, value) => {\r\n    const tmp = [...filtersList];\r\n    tmp[key][col] = value;\r\n    return tmp;\r\n}\r\n\r\nexport const updAvg = ({ updType, filter, num, average }) => {\r\n    const parseNum = parseFloat(num) || 0;\r\n    let tmp = JSON.parse(JSON.stringify(average));\r\n    tmp[filter].val = updType === 'sub' ? (tmp[filter].val - (parseNum)) : (parseFloat(tmp[filter].val) + parseNum);\r\n    tmp[filter].len = updType === 'sub' ? (tmp[filter].len - 1) : (parseFloat(tmp[filter].len) + 1);\r\n    return tmp;\r\n}\r\n\r\nexport const deleteStock = (key, stocks) => {\r\n    const newStocks = [...stocks.slice(0, key), ...stocks.slice(key + 1)]\r\n    return newStocks;\r\n};\r\n\r\nexport const deleteStocks = (keys, stocks) => {\r\n    const newStocks = stocks.reduce((acc, stock) => {\r\n        if (keys.includes(stock.id)) {\r\n            return acc;\r\n        }\r\n        return [...acc, stock]\r\n    }, [])\r\n    return newStocks;\r\n};\r\n\r\nexport const findPerDiff = (newNum, orgNum) => {\r\n    return ((newNum - orgNum) / orgNum) * 100;\r\n}\r\n\r\nconst findPercentage = (values) => {\r\n    return values.reduce((acc, val, key) => {\r\n        let tmp = {\r\n            diff: 0,\r\n            val\r\n        };\r\n        if (key === 0) return [tmp];\r\n        tmp.diff = findPerDiff(val, values[key - 1]);\r\n        return [...acc, tmp];\r\n    }, []);\r\n\r\n\r\n}\r\nexport const removeOddVal = (arr, maxPer = 10, highAvg = 100, lowAvg = 100) => {\r\n    arr.sort((a, b) => a - b)\r\n    const len = arr.length;\r\n    const max = Math.ceil((len / 100) * maxPer);\r\n    const firstChunk = arr.slice(0, max).reverse();\r\n    const lastChunk = arr.slice(len - max);\r\n    const firstPercentage = findPercentage(firstChunk);\r\n    const lastPercentage = findPercentage(lastChunk);\r\n    const firstPos = firstPercentage.findIndex(fp => fp.diff > lowAvg);\r\n    const lastPos = lastPercentage.findIndex(fp => fp.diff > highAvg);\r\n\r\n    const rm = [\r\n        ...(firstPos > -1 ? firstChunk.slice(firstPos) : []),\r\n        ...(lastPos > -1 ? lastChunk.slice(lastPos) : [])\r\n    ]\r\n    return rm;\r\n}\r\n","import styled from 'styled-components';\r\n\r\n\r\nconst Container = styled.div`\r\nmargin:${props => props.showChart ? \"0\" : \"0 40px 40px 40px\"};\r\nposition: relative;\r\n`;\r\n\r\nconst Header = styled.div`\r\ndisplay: flex;\r\njustify-content:space-between;\r\nmargin: 10px 40px 10px 40px;\r\nfont-weight:bold;\r\n`;\r\nexport {\r\n    Container,\r\n    Header\r\n}","import styled from 'styled-components';\r\n\r\n\r\nconst TextArea = styled.textarea`\r\n    height:100px;\r\n`;\r\n\r\nconst Button = styled.button`\r\n    width:10%;\r\n    margin:10px 0 0 0;    \r\n`;\r\n\r\nconst Header = styled.div`\r\n    width:100%;\r\n    display:flex;\r\n    flex-direction:column;\r\n`;\r\n\r\nconst Avg = styled.div`\r\nmargin: 5px 0 0 0;\r\ninput{\r\n    margin:0 5px 0 5px;\r\n}\r\nlabel{\r\n    font-weight:bold;\r\n    font-size:0.9rem;\r\n}\r\n\r\n`;\r\nexport {\r\n    TextArea,\r\n    Button,\r\n    Header,\r\n    Avg\r\n}","import { TextArea, Button, Header, Avg } from './Styles/Txt'\r\nimport action from './store/action';\r\nimport { useStore } from './store';\r\nconst Txt = () => {\r\n    const [store, dispatch] = useStore();\r\n    const { txt, } = store;\r\n    const handleChange = (e) => {\r\n        const txt = e.target.value;\r\n        const type = action.ADD_TEXT;\r\n        dispatch({ data: { txt }, type });\r\n    }\r\n    const handleAvg = (e) => {\r\n        const value = e.target.value;\r\n        const name = e.target.name;\r\n        //const type = name === 'highAvg' ? action.UPD_HIGH_AVG : action.UPD_LOW_AVG;\r\n        let type;\r\n        if (name === 'highAvg') {\r\n            type = action.UPD_HIGH_AVG\r\n        } else if (name === 'maxPer') {\r\n            type = action.UPD_MAX_PER;\r\n        } else {\r\n            type = action.UPD_LOW_AVG;\r\n        }\r\n        dispatch({ data: { value }, type });\r\n    }\r\n    const handleSubmit = () => {\r\n        dispatch({ type: action.ADD_STOCKS });\r\n        dispatch({ type: action.ADD_FILTERS });\r\n        dispatch({ type: action.ADD_AVG });\r\n    }\r\n    return (\r\n        <>\r\n            <Header>\r\n                <TextArea value={txt} onChange={handleChange} placeholder='Enter your JSON' />\r\n                <Avg>\r\n                    <label>HighAvg</label><input type='text' name='highAvg' value={store.highAvg} onChange={handleAvg} />\r\n                    <label>LowAvg</label><input type='text' name='lowAvg' value={store.lowAvg} onChange={handleAvg} />\r\n                    <label>Diff</label><input type='text' name='maxPer' value={store.maxPer} onChange={handleAvg} />\r\n                </Avg>\r\n                <Button onClick={handleSubmit} >Add</Button>\r\n            </Header>\r\n        </>\r\n    )\r\n};\r\nexport default Txt;","import { useState } from 'react';\r\nimport { Button } from './Styles/Txt';\r\nimport { useStore } from './store'\r\nimport action from './store/action';\r\n\r\nconst CompareDropDown = ({ handleChange }) => {\r\n    const [store] = useStore();\r\n    return (\r\n        <>\r\n            <select name='value' onChange={handleChange}>\r\n                <option value=''>Select</option>\r\n                {\r\n                    store.filtersList.map(filter => <option value={filter.label}>{filter.label}</option>)\r\n                }\r\n            </select>\r\n        </>\r\n    )\r\n}\r\nconst Rows = ({ rowNum, label, value, checked }) => {\r\n    const [store, dispatch] = useStore();\r\n    const [isCompare, setCompare] = useState(false);\r\n    const handleChange = (e) => {\r\n        let value = e.target.value;\r\n        const name = e.target.name;\r\n\r\n        if (name === \"checked\") {\r\n            value = !checked;\r\n        }\r\n        if (name === 'operator') {\r\n            if (value === 'GT' || value === 'LT') {\r\n                setCompare(true);\r\n            } else {\r\n                setCompare(false);\r\n            }\r\n            if (value === 'GTA' || value === 'LTA') {\r\n                dispatch({ type: action.UPD_FILTERS, data: { key: rowNum, col: 'value', value: Math.round(store.average[label].val / store.average[label].len) } })\r\n            } else {\r\n                dispatch({ type: action.UPD_FILTERS, data: { key: rowNum, col: 'value', value: '' } })\r\n            }\r\n        }\r\n        dispatch({ type: action.UPD_FILTERS, data: { key: rowNum, col: name, value: value } })\r\n        if ((name === 'operator' || name === 'value') && value) {\r\n            dispatch({ type: action.UPD_FILTERS, data: { key: rowNum, col: 'checked', value: true } })\r\n        }\r\n    }\r\n    return (\r\n        <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\", width: \"50%\", margin: \"10px\" }}>\r\n            <div>\r\n                <input type=\"checkbox\" onChange={handleChange} name='checked' checked={checked} />\r\n            </div>\r\n            <div style={{ width: '33%' }}>\r\n                <label>{label}</label>&nbsp;\r\n            </div>\r\n            <div style={{ width: '33%' }}>\r\n                <select name='operator' onChange={handleChange}>\r\n                    <option value=''>Select</option>\r\n                    <option value='>'>Greater</option>\r\n                    <option value='>='>Greater & Equal</option>\r\n                    <option value='<'>Less</option>\r\n                    <option value='<='>Less & equal</option>\r\n                    <option value='!='>Not equal</option>\r\n                    <option value='=='>Equal</option>\r\n                    <option value='GT'>Greater than</option>\r\n                    <option value='LT'>Less than</option>\r\n                    <option value='GTA'>Greater than AVG</option>\r\n                    <option value='LTA'>Less than AVG</option>\r\n                </select>\r\n            </div>\r\n            <div style={{ width: '33%' }}>\r\n                {!isCompare ? <input\r\n                    type=\"text\"\r\n                    placeholder='Value'\r\n                    name='value'\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    autoComplete='off'\r\n                /> : <CompareDropDown handleChange={handleChange} />}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nconst Filters = () => {\r\n    const [store, dispatch] = useStore();\r\n    const addToSearch = () => {\r\n        dispatch({ type: action.ADD_SEARCH });\r\n    }\r\n    return (\r\n        <>\r\n            <h5>Filters:</h5>\r\n            <div className='filters'>\r\n\r\n                {\r\n                    store.filtersList.map((filter, key) => <Rows label={filter.label} operator={filter.operator} value={filter.value} checked={filter.checked} key={key} rowNum={key}\r\n                    />)\r\n                }\r\n                <br />\r\n            </div>\r\n            <Button onClick={addToSearch} >Filter</Button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Filters;","import { useStore } from './store';\r\nimport TblView from './view/TblView';\r\n\r\nconst Tbl = () => {\r\n    const [store, dispatch] = useStore();\r\n    return (\r\n        <>\r\n            <TblView\r\n                average={store.average}\r\n                stocks={store.stocks}\r\n                dispatch={dispatch}\r\n                filtersCnt={store.filtersCnt}\r\n                searchParams={store.searchParams}\r\n                compare={store.compare}\r\n            />\r\n        </>\r\n    )\r\n}\r\nexport default Tbl;","import { useState } from \"react\";\r\nimport { findPerDiff } from './store/util';\r\n\r\nconst DiffList = ({ precentages }) => {\r\n    return (\r\n        <table style={{ width: \"10rem\", textAlign: \"left\" }}>\r\n\r\n            {\r\n                precentages.map((percentage) => {\r\n                    return (\r\n                        <tr>\r\n                            <td>{percentage.val}</td>\r\n                            <td>{Math.round(percentage.diff)}%</td>\r\n                        </tr>\r\n                    );\r\n                })\r\n            }\r\n\r\n\r\n        </table>\r\n    )\r\n}\r\n\r\nconst PercentageDiff = ({ label }) => {\r\n    const [vals, setVal] = useState('');\r\n    const [precentages, setPrecentages] = useState([]);\r\n    const values = vals.split(/\\s|%/).filter(v => v).map(v => v.split(',').join(''));\r\n    const onCalc = () => {\r\n        const per = values.reduce((acc, val, key) => {\r\n            let tmp = {\r\n                diff: 0,\r\n                val\r\n            };\r\n            if (key === 0) return [tmp];\r\n            tmp.diff = findPerDiff(val, values[key - 1]);\r\n            return [...acc, tmp];\r\n        }, []);\r\n\r\n        setPrecentages(per);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div style={{ margin: \"0 20px 0 0\" }}>\r\n                <h6>{label}</h6>\r\n                <input type=\"text\" onChange={e => setVal(e.target.value)} />\r\n                <button onClick={onCalc} >Calc</button>\r\n                <DiffList precentages={precentages} />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nconst AddDiff = () => {\r\n    const [cmps, setCmp] = useState([])\r\n    const addCmp = () => {\r\n        const label = prompt(`Enter diff name`);\r\n        if (!label) return;\r\n        setCmp([...cmps, { CmpName: PercentageDiff, label }])\r\n    }\r\n    return (\r\n        <div>\r\n            <h5>Calculate Diff:</h5>\r\n            <button onClick={addCmp}>Add</button>\r\n            <div style={{ display: \"flex\", width: '90%', flexWrap: \"wrap\" }}>\r\n                {cmps.map(cmp => {\r\n                    const { CmpName, label } = cmp;\r\n                    return <CmpName label={label} />\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default AddDiff;","import styled from 'styled-components';\r\n\r\n\r\nconst ModalContainer = styled.div`\r\n    position:absolute;\r\n    top:0;    \r\n    width:auto;\r\n    height:auto;\r\n    background:white;\r\n\r\n`;\r\n\r\nconst ModalContent = styled.div`\r\n`;\r\n\r\nexport {\r\n    ModalContainer,\r\n    ModalContent\r\n}","import { useStore } from './store';\r\nimport { ModalContainer, ModalContent } from './Styles/Modal';\r\nimport TblView from './view/TblView';\r\n\r\nconst Modal = ({ showModal }) => {\r\n    const [store, dispatch] = useStore();\r\n    const stocks = store.stocks.filter((stock, key) => {\r\n        return store.compare.indexOf(key) > -1 ? true : false;\r\n    })\r\n    return (\r\n        <>\r\n            <ModalContainer>\r\n                <ModalContent>\r\n                    <button onClick={showModal}>Close</button>\r\n                    <TblView\r\n                        average={store.average}\r\n                        stocks={stocks}\r\n                        dispatch={dispatch}\r\n                        filtersCnt={store.filtersCnt}\r\n                        searchParams={store.searchParams}\r\n                        compare={store.compare}\r\n                    />\r\n\r\n                </ModalContent>\r\n            </ModalContainer>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Modal;","import { useStore } from './../store';\r\nimport { useState } from 'react';\r\nimport { ModalContainer, ModalBody, ModalClose, Content } from './Style';\r\nimport { findPerDiff } from './../store/util';\r\nconst getPercentage = (stock, col1, col2) => {\r\n    return findPerDiff(stock[col1], stock[col2]);\r\n}\r\nconst findBest = (stocks, type) => {\r\n    const sortRoe = stocks.sort((a, b) => {\r\n        return parseFloat(b.filters[type]) - parseFloat(a.filters[type]);\r\n    });\r\n    return sortRoe.slice(0, 5);\r\n}\r\nconst findMaxMatch = (...arr) => {\r\n    return arr.reduce((acc, val, key) => {\r\n        const position = (key + 1) % 5;\r\n        const avgPos = position === 0 ? 5 : position;\r\n        if (acc[val.Name]) {\r\n            acc[val.Name].cnt += 1;\r\n            acc[val.Name].avgPos += avgPos;\r\n            acc[val.Name].t.push(avgPos);\r\n        } else {\r\n            acc[val.Name] = { cnt: 1, avgPos: avgPos, t: [position], name: val.Name };\r\n        }\r\n        return acc;\r\n    }, {});\r\n}\r\n\r\nconst sortByBest = (maxMatch) => {\r\n    const matches = Object.values(maxMatch);\r\n    return matches.sort(function (a, b) {\r\n        return b.cnt - a.cnt || a.avgPos - b.avgPos;\r\n    }).slice(0, 5);\r\n}\r\nconst addMetrics = function (stocks) {\r\n    stocks.forEach((stock, key) => {\r\n        stocks[key].filters.epsAnnGrowthPercent = getPercentage(stocks[key].filters, 'EPS12M', 'EPSAnnRs');\r\n        stocks[key].filters.epsPrevAnnGrowthPercent = getPercentage(stocks[key].filters, 'EPSAnnRs', 'EPSPrevAnnRs');\r\n        stocks[key].filters.epsPreYearQtrPercent = getPercentage(stocks[key].filters, 'EPSQtrRs', 'EPSPYQtrRs');\r\n        stocks[key].filters.epsPreQtrPercent = getPercentage(stocks[key].filters, 'EPSQtrRs', 'EPSPrevQtrRs');\r\n        stocks[key].filters.roePercent = getPercentage(stocks[key].filters, 'ROE', 'ROEPrevAnn');\r\n        stocks[key].filters.rocePercent = getPercentage(stocks[key].filters, 'ROCE', 'ROCEPrevYr');\r\n\r\n    });\r\n    return stocks;\r\n};\r\n\r\nconst filterStocks = (stocks) => {\r\n    const tmp = stocks.filter((stock) => {\r\n        /* if (stock.filters['MarkCap'] >= 10) {\r\n             return true;\r\n         }*/\r\n        return true;\r\n    });\r\n    return tmp;\r\n}\r\n\r\nconst grpBest = (stocks, cols) => {\r\n    const best = cols.map(col => {\r\n        return findBest(stocks, col);\r\n    });\r\n    const match = findMaxMatch(...best);\r\n    const sortByBest = sortByBest(match);\r\n    return [match, sortByBest];\r\n}\r\n\r\nconst calc = (stocks) => {\r\n    let stockObj = JSON.parse(JSON.stringify(stocks));\r\n    const filteredStocks = filterStocks(stockObj);\r\n    const parseStocks = addMetrics(filteredStocks);\r\n\r\n    //Current\r\n    const roe = findBest(parseStocks, 'ROE');\r\n    const roce = findBest(parseStocks, 'ROCE');\r\n    //const eps = findBest(parseStocks, 'EPS12M');\r\n    const saleGrowth = findBest(parseStocks, 'Salesgrowth');\r\n    const qtrSalesVar = findBest(parseStocks, 'QtrSalesVar'); // yoySales growth\r\n    const npmCur = findBest(parseStocks, 'NPMAnn'); // yoySales growth\r\n    const opmCur = findBest(parseStocks, 'OPM'); // yoySales growth\r\n\r\n\r\n    const currentMatch = findMaxMatch(\r\n        ...roe,\r\n        ...roce,\r\n        ...saleGrowth,\r\n        ...qtrSalesVar,\r\n        ...npmCur,\r\n        ...opmCur\r\n    );\r\n    const currentBest = sortByBest(currentMatch);\r\n    //const [currentMatch, currentBest] = grpBest(parseStocks, ['ROE', 'ROCE', 'EPS12M', 'Salesgrowth', 'QtrSalesVar']);\r\n    //History prev\r\n    const roePrevAnn = findBest(parseStocks, 'ROEPrevAnn');\r\n    const rocePrevYr = findBest(parseStocks, 'ROCEPrevYr');\r\n\r\n    const historyMatch = findMaxMatch(\r\n        ...roePrevAnn,\r\n        ...rocePrevYr\r\n    );\r\n    const histBest = sortByBest(historyMatch);\r\n\r\n    //EPS\r\n    /*  const eps12M = findBest(parseStocks, 'EPS12M'); // last 12 months.\r\n      const epsAnnPercent = findBest(parseStocks, 'EPSAnnRs'); // last fin year.\r\n      const epsPrevAnnPercent = findBest(parseStocks, 'EPSPrevAnnRs'); // prev fin year.\r\n      const epsQtr = findBest(parseStocks, 'EPSQtrRs'); // latest qtr\r\n      const epsPrevQtrPercent = findBest(parseStocks, 'EPSPrevQtrRs'); // prev qtr\r\n      const epsPrevYrQtrPercent = findBest(parseStocks, 'EPSPYQtrRs'); // prev yr qtr\r\n      const epsMatch = findMaxMatch(\r\n          ...eps12M,\r\n          ...epsAnnPercent,\r\n          ...epsPrevAnnPercent,\r\n          ...epsQtr,\r\n          ...epsPrevQtrPercent,\r\n          ...epsPrevYrQtrPercent\r\n      );\r\n      const epsBest = sortByBest(epsMatch);*/\r\n\r\n    //3Year avg\r\n    const roe3 = findBest(parseStocks, 'ROE3Yr');\r\n    const roce3 = findBest(parseStocks, 'ROCE3Yr');\r\n    const sales3 = findBest(parseStocks, 'SalesVar3Yrs');\r\n    const avg3Match = findMaxMatch(\r\n        ...roe3,\r\n        ...roce3,\r\n        ...sales3\r\n    );\r\n    const avg3Best = sortByBest(avg3Match);\r\n\r\n    //5Year avg\r\n    const roe5 = findBest(parseStocks, 'ROE5Yr');\r\n    const roce5 = findBest(parseStocks, 'ROCE5Yr');\r\n    const sales5 = findBest(parseStocks, 'SalesVar5Yrs');\r\n    const avg5Match = findMaxMatch(\r\n        ...roe5,\r\n        ...roce5,\r\n        ...sales5\r\n    );\r\n    const avg5Best = sortByBest(avg5Match);\r\n\r\n    const epsCmp12Mnth = findBest(parseStocks, 'epsAnnGrowthPercent'); // comparing last 12 months with last year\r\n    const epsCmp12MnthMatch = findMaxMatch(\r\n        ...epsCmp12Mnth\r\n    );\r\n    const epsCmp12MnthBest = sortByBest(epsCmp12MnthMatch);\r\n\r\n    const epsCmpLastYr = findBest(parseStocks, 'epsPrevAnnGrowth'); // comparing last year vs prev year\r\n    const epsCmpLastYrMatch = findMaxMatch(\r\n        ...epsCmpLastYr\r\n    );\r\n    const epsCmpLastYrBest = sortByBest(epsCmpLastYrMatch);\r\n\r\n    const epsCmpLastYrQtr = findBest(parseStocks, 'epsPreYearQtr');  // comparing latest qtr vs prev year qtr\r\n    const epsCmpLastYrQtrMatch = findMaxMatch(\r\n        ...epsCmpLastYrQtr\r\n    );\r\n    const epsCmpLastYrQtrBest = sortByBest(epsCmpLastYrQtrMatch);\r\n\r\n    const epsCmpPrevQtr = findBest(parseStocks, 'epsPreQtrPercent');  // comparing latest qtr vs prev qtr    \r\n    const epsCmpPrevQtrMatch = findMaxMatch(\r\n        ...epsCmpPrevQtr\r\n    );\r\n    const epsCmpPrevQtrBest = sortByBest(epsCmpPrevQtrMatch);\r\n\r\n    const roePercent = findBest(parseStocks, 'roePercent');\r\n    const roePercentMatch = findMaxMatch(\r\n        ...roePercent\r\n    );\r\n    const roePercentBest = sortByBest(roePercentMatch);\r\n\r\n    const rocePercent = findBest(parseStocks, 'rocePercent');\r\n    const rocePercentMatch = findMaxMatch(\r\n        ...rocePercent\r\n    );\r\n    const rocePercentBest = sortByBest(rocePercentMatch);\r\n\r\n    /* OPM */\r\n    const opmPercent = findBest(parseStocks, 'OPM'); // last 12 months\r\n    const opmAnnPercent = findBest(parseStocks, 'OPMAnn'); // last fin year\r\n    const opmPrevAnnPercent = findBest(parseStocks, 'OPMPrevAnn'); // prev fin year\r\n    const opmQtrPercent = findBest(parseStocks, 'OPMQtr'); // latest qtr\r\n    const opmPrevQtrPercent = findBest(parseStocks, 'OPMPrevQtr'); // prev qtr\r\n    const opmPrevYrQtrPercent = findBest(parseStocks, 'OPMPYQtr'); // prev yr qtr\r\n    const opmPercentMatch = findMaxMatch(\r\n        ...opmPercent,\r\n        ...opmAnnPercent,\r\n        ...opmPrevAnnPercent,\r\n        ...opmQtrPercent,\r\n        ...opmPrevQtrPercent,\r\n        ...opmPrevYrQtrPercent\r\n    );\r\n    const opmPercentBest = sortByBest(opmPercentMatch);\r\n\r\n    /* NPM */\r\n    const npmAnnPercent = findBest(parseStocks, 'NPMAnn'); // last fin year\r\n    const npmPrevAnnPercent = findBest(parseStocks, 'NPMPrevAnn'); // prev fin year\r\n    const npmQtrPercent = findBest(parseStocks, 'NPMQtr'); // latest qtr\r\n    const npmPrevQtrPercent = findBest(parseStocks, 'NPMPrevQtr'); // prev qtr\r\n    const npmPrevYrQtrPercent = findBest(parseStocks, 'NPMPYQtr'); // prev yr qtr\r\n    const npmPercentMatch = findMaxMatch(\r\n        ...npmAnnPercent,\r\n        ...npmPrevAnnPercent,\r\n        ...npmQtrPercent,\r\n        ...npmPrevQtrPercent,\r\n        ...npmPrevYrQtrPercent\r\n    );\r\n    const npmPercentBest = sortByBest(npmPercentMatch);\r\n\r\n    const allMatch = findMaxMatch(\r\n        ...roe,\r\n        ...roce,\r\n        ...saleGrowth,\r\n        ...qtrSalesVar,\r\n        ...roePrevAnn,\r\n        ...rocePrevYr,\r\n        ...roe3,\r\n        ...roce3,\r\n        ...sales3,\r\n        ...roe5,\r\n        ...roce5,\r\n        ...sales5,\r\n        ...epsCmp12Mnth,\r\n        ...epsCmpLastYr,\r\n        ...epsCmpLastYrQtr,\r\n        ...epsCmpPrevQtr,\r\n        ...roePercent,\r\n        ...rocePercent,\r\n        ...opmPercent,\r\n        ...opmAnnPercent,\r\n        ...opmPrevAnnPercent,\r\n        ...opmQtrPercent,\r\n        ...opmPrevQtrPercent,\r\n        ...opmPrevYrQtrPercent,\r\n        ...npmAnnPercent,\r\n        ...npmPrevAnnPercent,\r\n        ...npmQtrPercent,\r\n        ...npmPrevQtrPercent,\r\n        ...npmPrevYrQtrPercent\r\n    );\r\n    const finalBest = sortByBest(allMatch);\r\n    return {\r\n        currentBest,\r\n        histBest,\r\n        avg3Best,\r\n        avg5Best,\r\n        epsCmp12MnthBest,\r\n        epsCmpLastYrBest,\r\n        epsCmpLastYrQtrBest,\r\n        epsCmpPrevQtrBest,\r\n        roePercentBest,\r\n        rocePercentBest,\r\n        opmPercentBest,\r\n        npmPercentBest,\r\n        finalBest\r\n    };\r\n\r\n    //5Year avg\r\n    // Historic growth\r\n    // sales roe roce, cash\r\n}\r\nconst Tbl = ({ rows }) => {\r\n    return (\r\n        <table border=\"1\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Name</th>\r\n                    <th>Cnt</th>\r\n                    <th>Position</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {rows.map((row) => {\r\n                    return (\r\n                        <>\r\n                            <tr>\r\n                                <td>{row.name}</td>\r\n                                <td>{row.cnt}</td>\r\n                                <td>{row.avgPos}</td>\r\n                            </tr>\r\n                        </>\r\n                    );\r\n                })}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\nconst BestPick = () => {\r\n    const [openBestPick, setBestPic] = useState(false);\r\n    const [store] = useStore();\r\n    const {\r\n        currentBest,\r\n        histBest,\r\n        avg3Best,\r\n        avg5Best,\r\n        finalBest,\r\n        epsCmp12MnthBest,\r\n        epsCmpLastYrBest,\r\n        epsCmpLastYrQtrBest,\r\n        epsCmpPrevQtrBest,\r\n        roePercentBest,\r\n        rocePercentBest,\r\n        opmPercentBest,\r\n        npmPercentBest\r\n    } = calc(store.stocks);\r\n\r\n    return (\r\n        <>\r\n            <button onClick={e => setBestPic(!openBestPick)} >BestPick</button>\r\n            {\r\n                openBestPick && (<ModalContainer>\r\n                    <ModalBody>\r\n                        <ModalClose onClick={e => setBestPic(!openBestPick)} >X</ModalClose>\r\n                        <Content>\r\n                            <div>\r\n                                <h5>Current</h5>\r\n                                <Tbl rows={currentBest} />\r\n                            </div>\r\n                            <div>\r\n                                <h5>History</h5>\r\n                                <Tbl rows={histBest} />\r\n                            </div>\r\n                            <div>\r\n                                <h5>Avg 3 Years</h5>\r\n                                <Tbl rows={avg3Best} />\r\n                            </div>\r\n                            <div>\r\n                                <h5>Avg 5 Years</h5>\r\n                                <Tbl rows={avg5Best} />\r\n                            </div>\r\n\r\n\r\n                            <div>\r\n                                <h5>EPS12M vs Last yr</h5>\r\n                                <Tbl rows={epsCmp12MnthBest} />\r\n                            </div>\r\n                            <div>\r\n                                <h5>EPS last yr vs prev yr</h5>\r\n                                <Tbl rows={epsCmpLastYrBest} />\r\n                            </div>\r\n\r\n                            <div>\r\n                                <h5>Eps last qtr vs prev qtr</h5>\r\n                                <Tbl rows={epsCmpPrevQtrBest} />\r\n                            </div>\r\n\r\n                            <div>\r\n                                <h5>EPS prev yr qtr</h5>\r\n                                <Tbl rows={epsCmpLastYrQtrBest} />\r\n                            </div>\r\n\r\n                            <div>\r\n                                <h5>Roe vs prev yr</h5>\r\n                                <Tbl rows={roePercentBest} />\r\n                            </div>\r\n\r\n                            <div>\r\n                                <h5>Roce vs prev yr</h5>\r\n                                <Tbl rows={rocePercentBest} />\r\n                            </div>\r\n\r\n                            <div>\r\n                                <h5>OPM</h5>\r\n                                <Tbl rows={opmPercentBest} />\r\n                            </div>\r\n\r\n                            <div>\r\n                                <h5>NPM</h5>\r\n                                <Tbl rows={npmPercentBest} />\r\n                            </div>\r\n                            <div>\r\n                                <h5>Consolidated</h5>\r\n                                <Tbl rows={finalBest} />\r\n                            </div>\r\n                        </Content>\r\n                    </ModalBody>\r\n\r\n                </ModalContainer>)\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BestPick;","import { useState } from 'react';\r\nimport './App.css';\r\nimport Txt from './Txt';\r\nimport Filters from './Filters';\r\nimport Tbl from './Tbl';\r\nimport PercentageDiff from './PercentageDiff';\r\nimport { useStore } from './store';\r\nimport Modal from './modal';\r\nimport BestPick from './bestPick';\r\nimport SortedStocks from './sort';\r\nfunction Screener() {\r\n    const [store] = useStore();\r\n    const [isModalOpen, setModalOpen] = useState(false);\r\n    const showModal = () => {\r\n        setModalOpen(!isModalOpen);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Txt />\r\n            {store.stocks && store.stocks.length > 0 && <Filters />}\r\n            {store.stocks && store.stocks.length > 0 && <h5>Filters added: {store.filtersCnt}</h5>}\r\n            {store.compare && store.compare.length > 1 && <button onClick={showModal} >Compare</button>}\r\n            {store.stocks && store.stocks.length > 0 && <BestPick />}\r\n            {store.stocks && store.stocks.length > 0 && <SortedStocks />}\r\n            {store.stocks && store.stocks.length > 0 && <Tbl />}\r\n            {isModalOpen && <Modal showModal={showModal} />}\r\n            <PercentageDiff />\r\n\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default Screener;","import {\r\n    LineChart,\r\n    CartesianGrid,\r\n    XAxis,\r\n    YAxis,\r\n    Tooltip,\r\n    Legend,\r\n    Line\r\n} from 'recharts'\r\n\r\nfunction generateRandomColor() {\r\n    var letters = '0123456789ABCDEF';\r\n    var color = '#';\r\n    for (var i = 0; i < 6; i++) {\r\n        color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n}\r\nconst Chart = ({ data = [], uniqYear = [], yAxis = '' }) => {\r\n    const axis = yAxis ? yAxis.split(',').map(v => parseInt(v)) : [];\r\n    return (\r\n        <>\r\n            {\r\n                data.length ? <LineChart width={1350} height={1000} data={data}\r\n                >\r\n                    <CartesianGrid strokeDasharray=\"1 1\" />\r\n                    <XAxis dataKey=\"name\" />\r\n                    <YAxis domain={axis} />\r\n                    <Tooltip />\r\n                    <Legend />\r\n                    {\r\n                        uniqYear.map((year) => <Line type=\"monotone\" dataKey={year} stroke={generateRandomColor()} />)\r\n                    }\r\n\r\n                </LineChart> : null\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Chart;","import axios from 'axios';\r\n\r\n\r\nconst loadData = async (yr, index) => {\r\n    try {\r\n        const reqIndex = index || 'n50';\r\n        const res = await axios.get(`/screener/points/${reqIndex}/${yr}`);\r\n        return res;\r\n    } catch (e) {\r\n        alert('Failed to load');\r\n    }\r\n}\r\n\r\nexport default loadData;","import { useState } from 'react';\r\n\r\n\r\nconst useLoadFile = () => {\r\n    const [data, setData] = useState('');\r\n    const [chartData, setChartDat] = useState([]);\r\n    const [uniqYear, setYear] = useState([]);\r\n    const [noOfDays, setNoOfDays] = useState(5);\r\n    const processData = (dt, type, isCompare) => {\r\n        const tmpChartData = [...chartData];\r\n        const tmpData = dt.split('\\n').slice(1);\r\n        const yr = [...uniqYear];\r\n        let i = 0;\r\n        let [, startingPrice] = tmpData[0].split(',');\r\n        startingPrice = startingPrice.replace(/\"/g, '').trim();\r\n        tmpData.forEach((val, index) => {\r\n            if (parseInt(noOfDays) > 0 && index % parseInt(noOfDays) != 0) return;\r\n            let [date, open, , close] = val.split(',');\r\n            open = close;\r\n            if (typeof date === 'string' && typeof open === 'string') {\r\n                date = date.replace(/\"/g, '').trim();\r\n                open = open.replace(/\"/g, '').trim();\r\n                const [day, month, year] = date.split('-');\r\n                if (!tmpChartData[i]) {\r\n                    tmpChartData[i] = {\r\n                        name: `${day}-${month}`\r\n                    };\r\n                }\r\n                const index = isCompare ? type : year;\r\n                if (isCompare) {\r\n                    tmpChartData[i][index] = Number(((open - startingPrice) / startingPrice) * 100).toFixed(2);\r\n                } else {\r\n                    tmpChartData[i][index] = open;\r\n                }\r\n                if (!yr.includes(index)) {\r\n                    yr.push(index);\r\n                }\r\n                i++;\r\n            }\r\n        });\r\n        setChartDat(tmpChartData);\r\n        setYear(yr);\r\n    }\r\n    const clearLast = () => {\r\n        const tmp = [...uniqYear];\r\n        tmp.pop();\r\n        setYear(tmp);\r\n    }\r\n\r\n    return {\r\n        setNoOfDays,\r\n        setData,\r\n        setChartDat,\r\n        setYear,\r\n        processData,\r\n        clearLast,\r\n        uniqYear,\r\n        noOfDays,\r\n        chartData,\r\n        data\r\n    };\r\n}\r\n\r\nexport default useLoadFile;","import React, { useState } from 'react';\r\nimport Chart from './chart';\r\nimport loadData from './util';\r\nimport useLoadFile from './hooks/useLoadFile';\r\nconst Charts = () => {\r\n    const {\r\n        setNoOfDays,\r\n        setData,\r\n        setChartDat,\r\n        setYear,\r\n        processData,\r\n        clearLast,\r\n        uniqYear,\r\n        noOfDays,\r\n        chartData,\r\n        data\r\n    } = useLoadFile();\r\n    const [selectedYear, setSelectedYear] = useState('');\r\n    const [yAxis, setYAxis] = useState('5000,20000');\r\n    const [isCompare, setCompare] = useState(false);\r\n    const [index, setIndex] = useState('');\r\n    const [compareData, setCompareData] = useState('');\r\n    const handleChange = (e) => {\r\n        const val = e.target.value;\r\n        setNoOfDays(val);\r\n    }\r\n    const handleCheckbox = (e) => {\r\n        const isChecked = e.target.checked;\r\n        const yAxisDefaults = isChecked ? '-100,200' : '5000,20000';\r\n        setYAxis(yAxisDefaults);\r\n        setCompare(isChecked);\r\n    }\r\n    const handleAxisChange = (e) => {\r\n        const val = e.target.value;\r\n        setYAxis(val);\r\n    };\r\n    const handleFile = (e) => {\r\n        e.preventDefault()\r\n        const reader = new FileReader()\r\n        reader.onload = async (e) => {\r\n            const text = (e.target.result)\r\n            setData(text)\r\n        };\r\n        reader.readAsText(e.target.files[0])\r\n    }\r\n    const handleIndex = async (e) => {\r\n        const val = e.target.value;\r\n        if (!val) return;\r\n\r\n        const result = await loadData(selectedYear, val);\r\n\r\n        if (result?.data) {\r\n            setCompareData(result.data);\r\n        }\r\n        setIndex(val);\r\n    }\r\n    const handleSelect = async (type, e) => {\r\n        const val = e.target.value;\r\n        if (!val) return;\r\n        const result = await loadData(val, type);\r\n\r\n        if (result?.data) {\r\n            if (type != 'other') {\r\n                setData(result.data);\r\n            } else {\r\n                setCompareData(result.data);\r\n            }\r\n        }\r\n        setSelectedYear(val);\r\n    }\r\n    const clearChart = () => {\r\n        setData('');\r\n        setChartDat([]);\r\n        setYear([]);\r\n    }\r\n\r\n    const loadFile = () => {\r\n        if (isCompare) {\r\n            processData(data, 'n50', isCompare);\r\n            if (compareData) {\r\n                processData(compareData, index, isCompare);\r\n            }\r\n            return;\r\n        }\r\n        return processData(data, '', isCompare);\r\n    }\r\n    return (\r\n        <>\r\n            <input type=\"file\" onChange={handleFile} />\r\n            <input type=\"checkbox\" onChange={handleCheckbox} /> Compare\r\n\r\n            <input type=\"text\" type=\"number\" value={noOfDays} onChange={handleChange} />\r\n            <input type=\"text\" value={yAxis} onChange={handleAxisChange} />\r\n            <select onChange={handleSelect.bind(null, 'n50')} >\r\n                <option value=''>Select</option>\r\n                {Array.from({ length: 23 }, (_, key) => {\r\n                    return (\r\n                        <option value={key}>{key}</option>\r\n                    )\r\n                })}\r\n            </select>\r\n            <button onClick={loadFile} >Load</button>\r\n\r\n            {\r\n                !isCompare ? null : (\r\n                    <>\r\n                        <select onChange={handleIndex} >\r\n                            <option value=''>Select</option>\r\n                            <option value=\"auto\">Auto</option>\r\n                            <option value=\"bank\">Bank</option>\r\n                            <option value=\"pb\">Private Bank</option>\r\n                            <option value=\"psub\">PSU Bank</option>\r\n                            <option value=\"fs\">FS</option>\r\n                            <option value=\"pharma\">Pharma</option>\r\n                            <option value=\"fmcg\">FMCG</option>\r\n                            <option value=\"it\">IT</option>\r\n                            <option value=\"media\">Media</option>\r\n                            <option value=\"metal\">Metal</option>\r\n                            <option value=\"realty\">Realty</option>\r\n                        </select>\r\n\r\n                        {/*<select onChange={handleSelect.bind(null, 'other')} >\r\n                            <option value=''>Select</option>\r\n                            {Array.from({ length: 22 }, (_, key) => {\r\n                                return (\r\n                                    <option value={key}>{key}</option>\r\n                                )\r\n                            })}\r\n                        </select>*/}\r\n                        <button onClick={loadFile} >Compare</button>\r\n                    </>\r\n                )\r\n\r\n            }\r\n\r\n            <button onClick={clearLast} >Clear Index</button>\r\n            <button onClick={clearChart} >Clear All</button>\r\n            <Chart\r\n                data={chartData}\r\n                uniqYear={uniqYear}\r\n                yAxis={yAxis}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Charts;","import { useState } from 'react';\r\nimport './App.css';\r\nimport { Container, Header } from './Styles/Container'\r\nimport { Provider } from './store';\r\n\r\nimport Screener from './Screener';\r\nimport Charts from './charts';\r\nfunction App() {\r\n  const [showChart, setChart] = useState(false);\r\n  const handleChart = () => {\r\n    setChart(!showChart);\r\n  }\r\n  return (\r\n    <>\r\n      <Header>\r\n        <div>\r\n          <button onClick={handleChart} >Show Chart</button>\r\n        </div>\r\n        <div>v1.7.8</div>\r\n      </Header>\r\n      <Container showChart={showChart}>\r\n        {showChart ? <Charts /> : <Screener />}\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\n\r\nexport default () => {\r\n  return (\r\n    <Provider>\r\n      <App />\r\n    </Provider>\r\n  )\r\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import styled from 'styled-components';\r\n\r\nconst ModalContainer = styled.div`\r\n    position:fixed;\r\n    width:100%;\r\n    height:100%;\r\n    right:0;\r\n    left:0;\r\n    top:0;\r\n    z-index:1000;\r\n    background:rgb(0, 0, 0, 0.4);\r\n    display:flex;\r\n    justify-content:center;\r\n    align-items:center;    \r\n    overflow:hidden;\r\n`;\r\n\r\nconst ModalBody = styled.div`\r\n    position:relative;\r\n    background:white;\r\n    max-width:100%;\r\n    max-height:100%;\r\n    padding:5px;\r\n    overflow:auto;\r\n`;\r\n\r\nconst ModalClose = styled.div`\r\n    position:absolute;\r\n    top:0;\r\n    right:0;\r\n    padding:5px;\r\n`;\r\n\r\nconst Content = styled.div`\r\n    display:flex;\r\n    flex-wrap: wrap;\r\n    \r\n    >\r\n    div{\r\n        margin:5px;\r\n        max-width:20%;        \r\n    }\r\n    table tr th{\r\n        position:relative;\r\n    }\r\n    \r\n`;\r\nexport {\r\n    ModalContainer,\r\n    ModalBody,\r\n    ModalClose,\r\n    Content\r\n}","const search = {\r\n    '>': (a, b) => (parseFloat(a) > parseFloat(b)),\r\n    '>=': (a, b) => (parseFloat(a) >= parseFloat(b)),\r\n    '<': (a, b) => ((parseFloat(a) < parseFloat(b)) && a >= 0),\r\n    '<=': (a, b) => ((parseFloat(a) <= parseFloat(b)) && a >= 0),\r\n    '!=': (a, b) => (parseFloat(a) != parseFloat(b)),\r\n    '==': (a, b) => (parseFloat(a) == parseFloat(b)),\r\n    'GT': (a, b) => (parseFloat(a) >= parseFloat(b)),\r\n    'LT': (a, b) => (parseFloat(a) <= parseFloat(b)),\r\n    'GTA': (a, b) => (parseFloat(a) >= parseFloat(b)),\r\n    'LTA': (a, b) => ((parseFloat(a) <= parseFloat(b)) && a >= 0),\r\n}\r\n\r\nexport default search","import styled from 'styled-components';\r\n\r\n\r\nconst Table = styled.table`\r\nborder:1px solid;\r\n`;\r\n\r\nconst Avg = styled.div`\r\n    background: skyblue;\r\n    border-radius:50%;\r\n    font-size:9px;\r\n`\r\nconst Th = styled.th``;\r\nconst TD = styled.th``;\r\n\r\nexport {\r\n    Table,\r\n    Avg\r\n\r\n}","export const COLOR = {\r\n    RESULT: {\r\n        ABOVE_NINTY: { background: 'green', color: 'rgb(255,255,255)' },\r\n        ABOVE_EIGHTY: { background: 'lightgreen', color: 'rgb(255,255,255)' },\r\n        ABOVE_SEVENTY: { background: 'skyblue', color: 'rgb(255,255,255)' },\r\n        ABOVE_SIXTY: { background: 'orange', color: 'rgb(255,255,255)' },\r\n        ABOVE_FIFTY: { background: 'yellow', color: 'rgb(255,255,255)' },\r\n        BELOW_FIFTY: { background: 'red', color: 'rgb(255,255,255)' }\r\n    }\r\n}\r\n\r\n","import { useEffect, useState } from 'react';\r\nimport action from './../store/action';\r\nimport operators from './../operators';\r\nimport { Avg } from './../Styles/Table';\r\nimport { COLOR } from './../constants'\r\n\r\nimport './../Tbl.css';\r\nconst Heading = ({ stocks, average, dispatch, selectAll }) => {\r\n    const [isAscending, setAscending] = useState(false);\r\n    const { filters } = stocks[0];\r\n    const cols = Object.keys(filters);\r\n    const sortTable = (col) => {\r\n        let tmpStocks = JSON.parse(JSON.stringify(stocks));\r\n        tmpStocks.sort((a, b) => {\r\n            if (!isAscending) {\r\n                return a.filters[col] - b.filters[col]\r\n            } else {\r\n                return b.filters[col] - a.filters[col]\r\n            }\r\n        });\r\n        setAscending(!isAscending);\r\n        dispatch({ type: action.UPD_STOCKS, data: { stocks: tmpStocks } });\r\n    }\r\n    return (\r\n        <>\r\n            <th>ID <input type=\"checkbox\" onChange={selectAll} /></th>\r\n            <th>StockName</th>\r\n            {cols.map(col => {\r\n                if (!average?.[col]?.val) return <th onClick={sortTable.bind(null, col)} >{col}</th>;\r\n                return <th onClick={sortTable.bind(null, col)} >{col}<Avg>{(Math.round(average[col].val / average[col].len))}</Avg></th>;\r\n            })\r\n            }\r\n            <th>Matches</th>\r\n            <th>Action</th>\r\n        </>\r\n    )\r\n}\r\n\r\nconst CheckCmp = ({ name, value, onChange, average }) => {\r\n    const { rm } = average && average[name] ? average[name] : { rm: [] };\r\n    const isChecked = (value === '' || rm.includes(parseFloat(value))) ? true : false\r\n    const [checked, setChecked] = useState(isChecked);\r\n    useEffect(() => {\r\n        const isChecked = (value === '' || rm.includes(parseFloat(value))) ? true : false;\r\n        setChecked(isChecked);\r\n    }, []);\r\n\r\n    const handleChange = (e) => {\r\n        setChecked(!checked);\r\n        onChange(e);\r\n    }\r\n    return (\r\n        <>\r\n            <input type=\"checkbox\" name={name} value={value} onChange={handleChange} checked={checked} />\r\n        </>\r\n    )\r\n}\r\nconst Col = ({ stock, rowNum, average, filtersCnt, searchParams, compare, dispatch }) => {\r\n    const { Name, filters } = stock;\r\n    const cols = Object.keys(filters);\r\n    const [isHighlight, setHighlight] = useState(false);\r\n    const calcPercent = (matchCnt) => {\r\n        if (filtersCnt <= 0) return;\r\n        const percentage = ((matchCnt / filtersCnt) * 100);\r\n        if (percentage >= 90) {\r\n            return COLOR.RESULT.ABOVE_NINTY;\r\n        } else if (percentage >= 80) {\r\n            return COLOR.RESULT.ABOVE_EIGHTY;\r\n        } else if (percentage >= 70) {\r\n            return COLOR.RESULT.ABOVE_SEVENTY;\r\n        } else if (percentage >= 60) {\r\n            return COLOR.RESULT.ABOVE_SIXTY;\r\n        } else if (percentage >= 50) {\r\n            return COLOR.RESULT.ABOVE_FIFTY;\r\n        } else {\r\n            return COLOR.RESULT.BELOW_FIFTY;\r\n        }\r\n    }\r\n    let cnt = 0;\r\n    const processResult = (colName) => {\r\n        const params = searchParams[colName];\r\n\r\n        if (params && operators[params.operator]) {\r\n            const value = (params.operator === 'LT' || params.operator === 'GT') ? (filters[params.value] || 0) : params.value;\r\n            const className = operators[params.operator](filters[colName], value) ? 'greenCol' : 'redCol';\r\n            if (className === 'greenCol') {\r\n                cnt++;\r\n            }\r\n            return className;\r\n        }\r\n        return;\r\n    }\r\n    const handleChange = function (e) {\r\n        const { checked, value, name } = e.target;\r\n        const updType = checked ? 'sub' : 'add';\r\n        dispatch({ type: action.UPD_AVG, data: { updType, filter: name, num: value } });\r\n    }\r\n    const handleDelete = (rowNum) => {\r\n        dispatch({ type: action.DELETE_STOCK, data: { key: rowNum } });\r\n        dispatch({ type: action.ADD_AVG });\r\n    }\r\n    const checkHighlight = () => {\r\n        let tmp = [...compare];\r\n        if (!isHighlight) {\r\n            tmp.push(rowNum);\r\n        } else {\r\n            const index = tmp.indexOf(rowNum);\r\n            if (index >= 0) {\r\n                tmp = [...tmp.slice(0, index), ...tmp.slice(index + 1)];\r\n            }\r\n        }\r\n        setHighlight(!isHighlight);\r\n        dispatch({ type: action.ADD_TO_COMPARE, data: { compare: tmp } });\r\n    }\r\n    return (\r\n        <>\r\n            <td className={isHighlight ? 'highlight' : ''}>\r\n                <input type=\"checkbox\" onChange={checkHighlight} />\r\n                {Name}\r\n            </td>\r\n            {\r\n                cols.map((col, key) => {\r\n                    const className = processResult(col, key) || '';\r\n                    return (<td className={`${className} ${isHighlight ? 'highlight' : ''}`} >\r\n\r\n                        <CheckCmp name={col} value={filters[col]} average={average} onChange={handleChange} />\r\n                        {filters[col]}\r\n                    </td>);\r\n                })\r\n            }\r\n            <td className={isHighlight ? 'highlight' : ''} style={calcPercent(cnt)}>{cnt}</td>\r\n            <td><button onClick={handleDelete.bind(null, rowNum)}>Delete</button></td>\r\n        </>\r\n    )\r\n}\r\nconst Rows = (props) => {\r\n    const { stock: { id }, selectedRow, selectedIds } = props;\r\n    return (\r\n        <>\r\n            <tr>\r\n                <td>\r\n                    {id}\r\n                    <input type=\"checkbox\" checked={selectedIds.includes(id) ? \"checked\" : \"\"} onChange={selectedRow.bind(null, id)} />\r\n                </td>\r\n                <Col {...props} />\r\n            </tr>\r\n        </>\r\n    )\r\n}\r\n\r\nconst Tbl = (\r\n    { average, stocks, filtersCnt, searchParams, compare, dispatch }\r\n) => {\r\n    const [selectedIds, setSelectedId] = useState([]);\r\n    const [isSelectAll, setSelectAll] = useState(false);\r\n    const selectedRow = (id, e) => {\r\n        const isChecked = e.target.checked;\r\n\r\n        if (isChecked) {\r\n            setSelectedId([...selectedIds, id]);\r\n        } else {\r\n            const i = selectedIds.indexOf(id);\r\n            setSelectedId([...selectedIds.slice(0, i), ...selectedIds.slice(i + 1)]);\r\n        }\r\n    }\r\n    const handleDelete = () => {\r\n        dispatch({ type: action.DELETE_STOCKS, data: { key: selectedIds } });\r\n        dispatch({ type: action.ADD_AVG });\r\n        setSelectedId([]);\r\n    }\r\n    const selectAll = () => {\r\n        if (!isSelectAll) {\r\n            const allIds = stocks.map(stock => stock.id);\r\n            setSelectedId(allIds);\r\n        } else {\r\n            setSelectedId([]);\r\n        }\r\n        setSelectAll(!isSelectAll);\r\n    }\r\n    return (\r\n        <>\r\n            <button onClick={handleDelete} >Delete</button>\r\n            <table border=\"1\">\r\n                <thead>\r\n                    <tr>\r\n                        <Heading selectAll={selectAll} average={average} stocks={stocks} dispatch={dispatch} />\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {stocks.map((stock, rowNum) => <Rows selectedIds={selectedIds} selectedRow={selectedRow} stock={stock} compare={compare} rowNum={rowNum} average={average} filtersCnt={filtersCnt} searchParams={searchParams} dispatch={dispatch} />)}\r\n                </tbody>\r\n                <thead>\r\n                    <tr bold=\"1\">\r\n                        <Heading selectAll={selectAll} average={average} stocks={stocks} dispatch={dispatch} />\r\n                    </tr>\r\n                </thead>\r\n            </table>\r\n        </>\r\n    )\r\n}\r\nexport default Tbl;","export const cols = {\r\n    eps: { cols: ['EPSQtrRs', 'EPSPrevQtrRs', 'EPS12M', 'EPSAnnRs', 'EPSPrevAnnRs', 'EPSPYQtrRs'], order: 'desc', isRound: true },\r\n    npm: { cols: ['NPMAnn', 'NPMPrevAnn', 'NPMQtr', 'NPMPrevQtr', 'NPMPYQtr'], order: 'desc', isRound: true },\r\n    opm: { cols: ['OPM', 'OPMAnn', 'OPMPrevAnn', 'OPMQtr', 'OPMPrevQtr', 'OPMPYQtr'], order: 'desc', isRound: true },\r\n    sales: { cols: ['Salesgrowth', 'QtrSalesVar'], order: 'desc', isRound: true },\r\n    roe: { cols: ['ROE', 'ROEPrevAnn'], order: 'desc', isRound: true },\r\n    roce: { cols: ['ROCE', 'ROCEPrevYr'], order: 'desc', isRound: true },\r\n    cashFlow: { cols: ['FreeCashFlowRsCr', 'FCFPrevAnnRsCr'], order: 'desc', isRound: true },\r\n    debt: { cols: ['Debt to Eq'], order: 'asc', isRound: true },\r\n    pe: { cols: ['PERatio'], order: 'asc', isRound: true },\r\n    ey: { cols: ['EarningsYield'], order: 'desc', isRound: true },\r\n    qqp: { cols: ['QoQProfits'], order: 'desc', isRound: true },\r\n    qqs: { cols: ['QoQSales'], order: 'desc', isRound: true },\r\n    yyp: { cols: ['QtrProfitVar'], order: 'desc', isRound: true },\r\n    yys: { cols: ['QtrSalesVar'], order: 'desc', isRound: true },\r\n    r: { cols: ['Rank'], order: 'asc', isRound: false },\r\n    er: { cols: ['EarningsYieldRank'], order: 'asc', isRound: false },\r\n    rr: { cols: ['ROCERank'], order: 'asc', isRound: false }\r\n};\r\nexport const colsOrder = ['qqp', 'qqs', 'yyp', 'yys', 'eps', 'npm', 'opm', 'sales', 'roe', 'roce', 'cashFlow', 'debt', 'pe', 'ey'];\r\n\r\nexport const rankCols = ['EarningsYield', 'ROCE'];"],"sourceRoot":""}