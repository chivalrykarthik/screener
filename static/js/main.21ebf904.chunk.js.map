{"version":3,"sources":["Styles/Txt.js","store/action.js","store/util.js","store/store.js","store/index.js","Txt.js","Filters.js","operators.js","Styles/Table.js","constants.js","view/TblView.js","Tbl.js","PercentageDiff.js","Styles/Container.js","Styles/Modal.js","modal.js","bestPick/Style.js","bestPick/index.js","App.js","reportWebVitals.js","index.js"],"names":["TextArea","styled","textarea","Button","button","Header","div","Avg","action","ADD_TEXT","ADD_STOCKS","ADD_FILTERS","ADD_AVG","ADD_SEARCH","UPD_FILTERS","UPD_AVG","DELETE_STOCK","UPD_HIGH_AVG","UPD_LOW_AVG","UPD_MAX_PER","UPD_STOCKS","ADD_TO_COMPARE","findPerDiff","newNum","orgNum","findPercentage","values","reduce","acc","val","key","tmp","diff","removeOddVal","arr","maxPer","highAvg","lowAvg","sort","a","b","len","length","max","Math","ceil","firstChunk","slice","reverse","lastChunk","firstPercentage","lastPercentage","firstPos","findIndex","fp","lastPos","rm","initialState","txt","stocks","filtersList","average","searchParams","filtersCnt","compare","reducer","state","type","data","tmpStocks","JSON","parse","Array","isArray","e","alert","parseStocks","filters","Object","keys","map","label","value","operator","checked","exclude","createFilters","avg","hightAvg","valueAr","forEach","stock","filter","parseFloat","concat","getAvg","cnt","searchObj","addToSearch","updFilters","col","updFilter","updAverage","updType","num","parseNum","stringify","updAvg","updStocks","deleteStock","ScreenContext","createContext","Provider","children","store","useReducer","useStore","useContext","Txt","dispatch","handleAvg","target","name","onChange","placeholder","onClick","CompareDropDown","handleChange","Rows","rowNum","useState","isCompare","setCompare","round","style","display","flexDirection","justifyContent","width","margin","autoComplete","Filters","className","search","table","COLOR","th","ABOVE_NINTY","background","color","ABOVE_EIGHTY","ABOVE_SEVENTY","ABOVE_SIXTY","ABOVE_FIFTY","BELOW_FIFTY","Heading","isAscending","setAscending","cols","sortTable","bind","CheckCmp","isChecked","includes","setChecked","useEffect","Col","Name","isHighlight","setHighlight","index","indexOf","push","console","log","colName","params","operators","processResult","matchCnt","percentage","calcPercent","props","Tbl","border","bold","TblView","DiffList","precentages","textAlign","PercentageDiff","vals","setVal","setPrecentages","split","v","join","per","AddDiff","cmps","setCmp","prompt","CmpName","flexWrap","cmp","Container","ModalContainer","ModalContent","Modal","showModal","ModalBody","ModalClose","Content","getPercentage","col1","col2","findBest","findMaxMatch","position","avgPos","t","sortByBest","maxMatch","calc","epsAnnGrowthPercent","epsPrevAnnGrowthPercent","epsPreYearQtrPercent","roePercent","rocePercent","addMetrics","roe","roce","eps","saleGrowth","qtrSalesVar","currentMatch","currentBest","roePrevAnn","rocePrevYr","epsPreAn","epsAnn","historyMatch","histBest","epsQtr","epsPQtr","epsMatch","epsBest","roe3","roce3","sales3","avg3Match","avg3Best","roe5","roce5","sales5","avg5Match","avg5Best","epsCmp12Mnth","epsCmp12MnthMatch","epsCmp12MnthBest","epsCmpLastYr","epsCmpLastYrMatch","epsCmpLastYrBest","epsCmpLastYrQtr","epsCmpLastYrQtrMatch","epsCmpLastYrQtrBest","roePercentMatch","roePercentBest","rocePercentMatch","rocePercentBest","allMatch","finalBest","rows","row","BestPick","openBestPick","setBestPic","App","isModalOpen","setModalOpen","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.21ebf904.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\n\r\nconst TextArea = styled.textarea`\r\n    height:100px;\r\n`;\r\n\r\nconst Button = styled.button`\r\n    width:10%;\r\n    margin:10px 0 0 0;    \r\n`;\r\n\r\nconst Header = styled.div`\r\n    width:100%;\r\n    display:flex;\r\n    flex-direction:column;\r\n`;\r\n\r\nconst Avg = styled.div`\r\nmargin: 5px 0 0 0;\r\ninput{\r\n    margin:0 5px 0 5px;\r\n}\r\nlabel{\r\n    font-weight:bold;\r\n    font-size:0.9rem;\r\n}\r\n\r\n`;\r\nexport {\r\n    TextArea,\r\n    Button,\r\n    Header,\r\n    Avg\r\n}","const action = {\r\n    ADD_TEXT: 'ADD_TEXT',\r\n    ADD_STOCKS: 'ADD_STOCKS',\r\n    ADD_FILTERS: 'ADD_FILTERS',\r\n    ADD_AVG: 'ADD_AVG',\r\n    ADD_SEARCH: 'ADD_SEARCH',\r\n    UPD_FILTERS: 'UPD_FILTERS',\r\n    UPD_AVG: 'UPD_AVG',\r\n    DELETE_STOCK: 'DELETE_STOCK',\r\n    UPD_HIGH_AVG: 'UPD_HIGH_AVG',\r\n    UPD_LOW_AVG: 'UPD_LOW_AVG',\r\n    UPD_MAX_PER: 'UPD_MAX_PER',\r\n    UPD_STOCKS: 'UPD_STOCKS',\r\n    ADD_TO_COMPARE: 'ADD_TO_COMPARE'\r\n}\r\n\r\nexport default action;","export const parseStocks = (txt) => {\r\n    try {\r\n        let tmpStocks = JSON.parse(txt);\r\n        if (!Array.isArray(tmpStocks)) { tmpStocks = [tmpStocks] }\r\n        return tmpStocks;\r\n    } catch (e) {\r\n        alert(\"Invlaid JSON\")\r\n    }\r\n}\r\n\r\nexport const createFilters = (stocks) => {\r\n    if (stocks?.length) {\r\n        const firstRow = Object.keys(stocks[0].filters);\r\n        const tmpFilters = firstRow.map((key) => {\r\n            return {\r\n                label: key,\r\n                value: '',\r\n                operator: '',\r\n                checked: false,\r\n                exclude: []\r\n            }\r\n        });\r\n        return tmpFilters;\r\n    } else {\r\n        return [];\r\n    }\r\n}\r\n\r\nexport const getAvg = (stocks, maxPer = 10, hightAvg = 100, lowAvg = 100) => {\r\n    if (Array.isArray(stocks) && stocks?.length) {\r\n        let avg = {};\r\n        let valueAr = {};\r\n        stocks.forEach(stock => {\r\n            const { filters } = stock;\r\n            Object.keys(filters).forEach(filter => {\r\n                const val = parseFloat(avg[filter]?.val || 0) + parseFloat(filters[filter] || 0);\r\n                const len = filters[filter] != '' ? (avg[filter]?.len || 0) + 1 : avg[filter]?.len;\r\n                if (filters[filter] != '') {\r\n                    valueAr[filter] = (valueAr[filter] || []).concat(parseFloat(filters[filter]));\r\n                }\r\n                avg[filter] = { val, len };\r\n            });\r\n        });\r\n        Object.keys(valueAr).forEach(filter => {\r\n            valueAr[filter].sort((a, b) => a - b);\r\n            const rm = removeOddVal(valueAr[filter], maxPer, hightAvg, lowAvg);\r\n            rm.forEach(val => {\r\n                avg[filter].val -= val\r\n                avg[filter].len--;\r\n            });\r\n            avg[filter].rm = rm;\r\n        });\r\n        return avg;\r\n    }\r\n}\r\n\r\nexport const addToSearch = (filters) => {\r\n    let cnt = 0;\r\n    const searchObj = filters.reduce((acc, val) => {\r\n        if (val.checked) {\r\n            cnt++;\r\n            let tmp = {\r\n                [val.label]: {\r\n                    value: val.value,\r\n                    operator: val.operator,\r\n                }\r\n            };\r\n            return { ...acc, ...tmp };\r\n        }\r\n        return acc;\r\n    }, {});\r\n    return {\r\n        cnt,\r\n        searchObj\r\n    };\r\n}\r\n\r\nexport const updFilter = (filtersList, key, col, value) => {\r\n    const tmp = [...filtersList];\r\n    tmp[key][col] = value;\r\n    return tmp;\r\n}\r\n\r\nexport const updAvg = ({ updType, filter, num, average }) => {\r\n    const parseNum = parseFloat(num) || 0;\r\n    let tmp = JSON.parse(JSON.stringify(average));\r\n    tmp[filter].val = updType === 'sub' ? (tmp[filter].val - (parseNum)) : (parseFloat(tmp[filter].val) + parseNum);\r\n    tmp[filter].len = updType === 'sub' ? (tmp[filter].len - 1) : (parseFloat(tmp[filter].len) + 1);\r\n    return tmp;\r\n}\r\n\r\nexport const deleteStock = (key, stocks) => {\r\n    const newStocks = [...stocks.slice(0, key), ...stocks.slice(key + 1)]\r\n    return newStocks;\r\n};\r\n\r\nexport const findPerDiff = (newNum, orgNum) => {\r\n    return ((newNum - orgNum) / orgNum) * 100;\r\n}\r\n\r\nconst findPercentage = (values) => {\r\n    return values.reduce((acc, val, key) => {\r\n        let tmp = {\r\n            diff: 0,\r\n            val\r\n        };\r\n        if (key === 0) return [tmp];\r\n        tmp.diff = findPerDiff(val, values[key - 1]);\r\n        return [...acc, tmp];\r\n    }, []);\r\n\r\n\r\n}\r\nexport const removeOddVal = (arr, maxPer = 10, highAvg = 100, lowAvg = 100) => {\r\n    arr.sort((a, b) => a - b)\r\n    const len = arr.length;\r\n    const max = Math.ceil((len / 100) * maxPer);\r\n    const firstChunk = arr.slice(0, max).reverse();\r\n    const lastChunk = arr.slice(len - max);\r\n    const firstPercentage = findPercentage(firstChunk);\r\n    const lastPercentage = findPercentage(lastChunk);\r\n    const firstPos = firstPercentage.findIndex(fp => fp.diff > lowAvg);\r\n    const lastPos = lastPercentage.findIndex(fp => fp.diff > highAvg);\r\n\r\n    const rm = [\r\n        ...(firstPos > -1 ? firstChunk.slice(firstPos) : []),\r\n        ...(lastPos > -1 ? lastChunk.slice(lastPos) : [])\r\n    ]\r\n    return rm;\r\n}\r\n","import {\r\n    parseStocks,\r\n    createFilters,\r\n    getAvg,\r\n    addToSearch,\r\n    updFilter,\r\n    updAvg,\r\n    deleteStock\r\n} from './util';\r\nexport const initialState = {\r\n    txt: '',\r\n    highAvg: 100,\r\n    lowAvg: 100,\r\n    maxPer: 10,\r\n    stocks: [],\r\n    filtersList: [],\r\n    average: {},\r\n    searchParams: {},\r\n    filtersCnt: 0,\r\n    compare: []\r\n};\r\n\r\n\r\nexport const reducer = (state, action) => {\r\n    const { type, data } = action;\r\n    switch (type) {\r\n        case \"ADD_TEXT\":\r\n            return { ...state, txt: data.txt };\r\n        case \"ADD_STOCKS\":\r\n            const stocks = parseStocks(state.txt);\r\n            return {\r\n                ...state, stocks: stocks, filtersList: [], filtersList: [],\r\n                average: {},\r\n                searchParams: {},\r\n                filtersCnt: 0\r\n            };\r\n        case \"ADD_FILTERS\":\r\n            const filters = createFilters(state.stocks);\r\n            return { ...state, filtersList: filters };\r\n        case \"ADD_AVG\":\r\n            const avg = getAvg(state.stocks, state.maxPer, state.highAvg, state.lowAvg);\r\n            return { ...state, average: avg };\r\n        case \"ADD_SEARCH\":\r\n            const { cnt, searchObj } = addToSearch(state.filtersList);\r\n            return { ...state, searchParams: searchObj, filtersCnt: cnt };\r\n        case \"UPD_FILTERS\":\r\n            const updFilters = updFilter(state.filtersList, data.key, data.col, data.value);\r\n            return { ...state, filtersList: updFilters };\r\n        case \"UPD_AVG\":\r\n            const updAverage = updAvg({ ...data, average: state.average });\r\n            return { ...state, average: updAverage };\r\n        case \"DELETE_STOCK\":\r\n            const updStocks = deleteStock(data.key, state.stocks);\r\n            return { ...state, stocks: updStocks };\r\n        case \"UPD_HIGH_AVG\":\r\n            return { ...state, highAvg: data.value };\r\n        case \"UPD_LOW_AVG\":\r\n            return { ...state, lowAvg: data.value };\r\n        case \"UPD_MAX_PER\":\r\n            return { ...state, maxPer: data.value };\r\n        case \"UPD_STOCKS\":\r\n            return { ...state, stocks: data.stocks };\r\n        case \"ADD_TO_COMPARE\":\r\n            return { ...state, compare: data.compare };\r\n        default:\r\n            return state;\r\n    }\r\n}","import React, { useReducer, useContext, createContext } from 'react';\r\nimport { reducer, initialState } from './store';\r\nexport let ScreenContext = createContext({});\r\nexport const Provider = ({ children }) => {\r\n    let store = useReducer(reducer, initialState);\r\n    return (\r\n        <ScreenContext.Provider value={store}>\r\n            {children}\r\n        </ScreenContext.Provider>\r\n    )\r\n};\r\n\r\n\r\nexport const useStore = () => {\r\n    let store = useContext(ScreenContext);\r\n    return store;\r\n}","import { TextArea, Button, Header, Avg } from './Styles/Txt'\r\nimport action from './store/action';\r\nimport { useStore } from './store';\r\nconst Txt = () => {\r\n    const [store, dispatch] = useStore();\r\n    const { txt, } = store;\r\n    const handleChange = (e) => {\r\n        const txt = e.target.value;\r\n        const type = action.ADD_TEXT;\r\n        dispatch({ data: { txt }, type });\r\n    }\r\n    const handleAvg = (e) => {\r\n        const value = e.target.value;\r\n        const name = e.target.name;\r\n        //const type = name === 'highAvg' ? action.UPD_HIGH_AVG : action.UPD_LOW_AVG;\r\n        let type;\r\n        if (name === 'highAvg') {\r\n            type = action.UPD_HIGH_AVG\r\n        } else if (name === 'maxPer') {\r\n            type = action.UPD_MAX_PER;\r\n        } else {\r\n            type = action.UPD_LOW_AVG;\r\n        }\r\n        dispatch({ data: { value }, type });\r\n    }\r\n    const handleSubmit = () => {\r\n        dispatch({ type: action.ADD_STOCKS });\r\n        dispatch({ type: action.ADD_FILTERS });\r\n        dispatch({ type: action.ADD_AVG });\r\n    }\r\n    return (\r\n        <>\r\n            <Header>\r\n                <TextArea value={txt} onChange={handleChange} placeholder='Enter your JSON' />\r\n                <Avg>\r\n                    <label>HighAvg</label><input type='text' name='highAvg' value={store.highAvg} onChange={handleAvg} />\r\n                    <label>LowAvg</label><input type='text' name='lowAvg' value={store.lowAvg} onChange={handleAvg} />\r\n                    <label>Diff</label><input type='text' name='maxPer' value={store.maxPer} onChange={handleAvg} />\r\n                </Avg>\r\n                <Button onClick={handleSubmit} >Add</Button>\r\n            </Header>\r\n        </>\r\n    )\r\n};\r\nexport default Txt;","import { useState } from 'react';\r\nimport { Button } from './Styles/Txt';\r\nimport { useStore } from './store'\r\nimport action from './store/action';\r\n\r\nconst CompareDropDown = ({ handleChange }) => {\r\n    const [store] = useStore();\r\n    return (\r\n        <>\r\n            <select name='value' onChange={handleChange}>\r\n                <option value=''>Select</option>\r\n                {\r\n                    store.filtersList.map(filter => <option value={filter.label}>{filter.label}</option>)\r\n                }\r\n            </select>\r\n        </>\r\n    )\r\n}\r\nconst Rows = ({ rowNum, label, value, checked }) => {\r\n    const [store, dispatch] = useStore();\r\n    const [isCompare, setCompare] = useState(false);\r\n    const handleChange = (e) => {\r\n        let value = e.target.value;\r\n        const name = e.target.name;\r\n\r\n        if (name === \"checked\") {\r\n            value = !checked;\r\n        }\r\n        if (name === 'operator') {\r\n            if (value === 'GT' || value === 'LT') {\r\n                setCompare(true);\r\n            } else {\r\n                setCompare(false);\r\n            }\r\n            if (value === 'GTA' || value === 'LTA') {\r\n                dispatch({ type: action.UPD_FILTERS, data: { key: rowNum, col: 'value', value: Math.round(store.average[label].val / store.average[label].len) } })\r\n            } else {\r\n                dispatch({ type: action.UPD_FILTERS, data: { key: rowNum, col: 'value', value: '' } })\r\n            }\r\n        }\r\n        dispatch({ type: action.UPD_FILTERS, data: { key: rowNum, col: name, value: value } })\r\n        if ((name === 'operator' || name === 'value') && value) {\r\n            dispatch({ type: action.UPD_FILTERS, data: { key: rowNum, col: 'checked', value: true } })\r\n        }\r\n    }\r\n    return (\r\n        <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\", width: \"50%\", margin: \"10px\" }}>\r\n            <div>\r\n                <input type=\"checkbox\" onChange={handleChange} name='checked' checked={checked} />\r\n            </div>\r\n            <div style={{ width: '33%' }}>\r\n                <label>{label}</label>&nbsp;\r\n            </div>\r\n            <div style={{ width: '33%' }}>\r\n                <select name='operator' onChange={handleChange}>\r\n                    <option value=''>Select</option>\r\n                    <option value='>'>Greater</option>\r\n                    <option value='>='>Greater & Equal</option>\r\n                    <option value='<'>Less</option>\r\n                    <option value='<='>Less & equal</option>\r\n                    <option value='!='>Not equal</option>\r\n                    <option value='=='>Equal</option>\r\n                    <option value='GT'>Greater than</option>\r\n                    <option value='LT'>Less than</option>\r\n                    <option value='GTA'>Greater than AVG</option>\r\n                    <option value='LTA'>Less than AVG</option>\r\n                </select>\r\n            </div>\r\n            <div style={{ width: '33%' }}>\r\n                {!isCompare ? <input\r\n                    type=\"text\"\r\n                    placeholder='Value'\r\n                    name='value'\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    autoComplete='off'\r\n                /> : <CompareDropDown handleChange={handleChange} />}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nconst Filters = () => {\r\n    const [store, dispatch] = useStore();\r\n    const addToSearch = () => {\r\n        dispatch({ type: action.ADD_SEARCH });\r\n    }\r\n    return (\r\n        <>\r\n            <h5>Filters:</h5>\r\n            <div className='filters'>\r\n\r\n                {\r\n                    store.filtersList.map((filter, key) => <Rows label={filter.label} operator={filter.operator} value={filter.value} checked={filter.checked} key={key} rowNum={key}\r\n                    />)\r\n                }\r\n                <br />\r\n            </div>\r\n            <Button onClick={addToSearch} >Filter</Button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Filters;","const search = {\r\n    '>': (a, b) => (parseFloat(a) > parseFloat(b)),\r\n    '>=': (a, b) => (parseFloat(a) >= parseFloat(b)),\r\n    '<': (a, b) => ((parseFloat(a) < parseFloat(b)) && a >= 0),\r\n    '<=': (a, b) => ((parseFloat(a) <= parseFloat(b)) && a >= 0),\r\n    '!=': (a, b) => (parseFloat(a) != parseFloat(b)),\r\n    '==': (a, b) => (parseFloat(a) == parseFloat(b)),\r\n    'GT': (a, b) => (parseFloat(a) >= parseFloat(b)),\r\n    'LT': (a, b) => (parseFloat(a) <= parseFloat(b)),\r\n    'GTA': (a, b) => (parseFloat(a) >= parseFloat(b)),\r\n    'LTA': (a, b) => ((parseFloat(a) <= parseFloat(b)) && a >= 0),\r\n}\r\n\r\nexport default search","import styled from 'styled-components';\r\n\r\n\r\nconst Table = styled.table`\r\nborder:1px solid;\r\n`;\r\n\r\nconst Avg = styled.div`\r\n    background: skyblue;\r\n    border-radius:50%;\r\n    font-size:9px;\r\n`\r\nconst Th = styled.th``;\r\nconst TD = styled.th``;\r\n\r\nexport {\r\n    Table,\r\n    Avg\r\n\r\n}","export const COLOR = {\r\n    RESULT: {\r\n        ABOVE_NINTY: { background: 'green', color: 'rgb(255,255,255)' },\r\n        ABOVE_EIGHTY: { background: 'lightgreen', color: 'rgb(255,255,255)' },\r\n        ABOVE_SEVENTY: { background: 'skyblue', color: 'rgb(255,255,255)' },\r\n        ABOVE_SIXTY: { background: 'orange', color: 'rgb(255,255,255)' },\r\n        ABOVE_FIFTY: { background: 'yellow', color: 'rgb(255,255,255)' },\r\n        BELOW_FIFTY: { background: 'red', color: 'rgb(255,255,255)' }\r\n    }\r\n}","import action from './../store/action';\r\nimport operators from './../operators';\r\nimport { Avg } from './../Styles/Table';\r\nimport { COLOR } from './../constants'\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport './../Tbl.css';\r\nconst Heading = ({ stocks, average, dispatch }) => {\r\n    const [isAscending, setAscending] = useState(false);\r\n    const { filters } = stocks[0];\r\n    const cols = Object.keys(filters);\r\n    const sortTable = (col) => {\r\n        let tmpStocks = JSON.parse(JSON.stringify(stocks));\r\n        tmpStocks.sort((a, b) => {\r\n            if (!isAscending) {\r\n                return a.filters[col] - b.filters[col]\r\n            } else {\r\n                return b.filters[col] - a.filters[col]\r\n            }\r\n        });\r\n        setAscending(!isAscending);\r\n        dispatch({ type: action.UPD_STOCKS, data: { stocks: tmpStocks } });\r\n    }\r\n    return (\r\n        <>\r\n            <th>StockName</th>\r\n            {cols.map(col => <th onClick={sortTable.bind(null, col)} >{col}<Avg>{(Math.round(average[col].val / average[col].len))}</Avg></th>)}\r\n            <th>Matches</th>\r\n            <th>Action</th>\r\n        </>\r\n    )\r\n}\r\n\r\nconst CheckCmp = ({ name, value, onChange, average }) => {\r\n\r\n    const { rm } = average[name];\r\n    const isChecked = (value === '' || rm.includes(parseFloat(value))) ? true : false\r\n    const [checked, setChecked] = useState(isChecked);\r\n    useEffect(() => {\r\n        const isChecked = (value === '' || rm.includes(parseFloat(value))) ? true : false;\r\n        setChecked(isChecked);\r\n    }, [...rm]);\r\n\r\n    const handleChange = (e) => {\r\n        setChecked(!checked);\r\n        onChange(e);\r\n    }\r\n    return (\r\n        <>\r\n            <input type=\"checkbox\" name={name} value={value} onChange={handleChange} checked={checked} />\r\n        </>\r\n    )\r\n}\r\nconst Col = ({ stock, rowNum, average, filtersCnt, searchParams, compare, dispatch }) => {\r\n    const { Name, filters } = stock;\r\n    const cols = Object.keys(filters);\r\n    const [isHighlight, setHighlight] = useState(false);\r\n    const calcPercent = (matchCnt) => {\r\n        if (filtersCnt <= 0) return;\r\n        const percentage = ((matchCnt / filtersCnt) * 100);\r\n        if (percentage >= 90) {\r\n            return COLOR.RESULT.ABOVE_NINTY;\r\n        } else if (percentage >= 80) {\r\n            return COLOR.RESULT.ABOVE_EIGHTY;\r\n        } else if (percentage >= 70) {\r\n            return COLOR.RESULT.ABOVE_SEVENTY;\r\n        } else if (percentage >= 60) {\r\n            return COLOR.RESULT.ABOVE_SIXTY;\r\n        } else if (percentage >= 50) {\r\n            return COLOR.RESULT.ABOVE_FIFTY;\r\n        } else {\r\n            return COLOR.RESULT.BELOW_FIFTY;\r\n        }\r\n    }\r\n    let cnt = 0;\r\n    const processResult = (colName) => {\r\n        const params = searchParams[colName];\r\n\r\n        if (params && operators[params.operator]) {\r\n            const value = (params.operator === 'LT' || params.operator === 'GT') ? (filters[params.value] || 0) : params.value;\r\n            const className = operators[params.operator](filters[colName], value) ? 'greenCol' : 'redCol';\r\n            if (className === 'greenCol') {\r\n                cnt++;\r\n            }\r\n            return className;\r\n        }\r\n        return;\r\n    }\r\n    const handleChange = function (e) {\r\n        const { checked, value, name } = e.target;\r\n        const updType = checked ? 'sub' : 'add';\r\n        dispatch({ type: action.UPD_AVG, data: { updType, filter: name, num: value } });\r\n    }\r\n    const handleDelete = (rowNum) => {\r\n        dispatch({ type: action.DELETE_STOCK, data: { key: rowNum } });\r\n        dispatch({ type: action.ADD_AVG });\r\n    }\r\n    const checkHighlight = () => {\r\n        let tmp = [...compare];\r\n        if (!isHighlight) {\r\n            tmp.push(rowNum);\r\n            console.log(rowNum)\r\n        } else {\r\n            const index = tmp.indexOf(rowNum);\r\n            if (index >= 0) {\r\n                tmp = [...tmp.slice(0, index), ...tmp.slice(index + 1)];\r\n            }\r\n        }\r\n        setHighlight(!isHighlight);\r\n        dispatch({ type: action.ADD_TO_COMPARE, data: { compare: tmp } });\r\n    }\r\n    return (\r\n        <>\r\n            <td className={isHighlight ? 'highlight' : ''}>\r\n                <input type=\"checkbox\" onChange={checkHighlight} />\r\n                {Name}\r\n            </td>\r\n            {\r\n                cols.map((col, key) => {\r\n                    const className = processResult(col, key) || '';\r\n                    return (<td className={`${className} ${isHighlight ? 'highlight' : ''}`} >\r\n\r\n                        <CheckCmp name={col} value={filters[col]} average={average} onChange={handleChange} />\r\n                        {filters[col]}\r\n                    </td>);\r\n                })\r\n            }\r\n            <td className={isHighlight ? 'highlight' : ''} style={calcPercent(cnt)}>{cnt}</td>\r\n            <td><button onClick={handleDelete.bind(null, rowNum)}>Delete</button></td>\r\n        </>\r\n    )\r\n}\r\nconst Rows = (props) => {\r\n    return (\r\n        <>\r\n            <tr>\r\n                <Col {...props} />\r\n            </tr>\r\n        </>\r\n    )\r\n}\r\n\r\nconst Tbl = (\r\n    { average, stocks, filtersCnt, searchParams, compare, dispatch }\r\n) => {\r\n\r\n    return (\r\n        <>\r\n            <table border=\"1\">\r\n                <thead>\r\n                    <tr>\r\n                        <Heading average={average} stocks={stocks} dispatch={dispatch} />\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {stocks.map((stock, rowNum) => <Rows stock={stock} compare={compare} rowNum={rowNum} average={average} filtersCnt={filtersCnt} searchParams={searchParams} dispatch={dispatch} />)}\r\n                </tbody>\r\n                <thead>\r\n                    <tr bold=\"1\">\r\n                        <Heading average={average} stocks={stocks} dispatch={dispatch} />\r\n                    </tr>\r\n                </thead>\r\n            </table>\r\n        </>\r\n    )\r\n}\r\nexport default Tbl;","import { useStore } from './store';\r\nimport TblView from './view/TblView';\r\n\r\nconst Tbl = () => {\r\n    const [store, dispatch] = useStore();\r\n    return (\r\n        <>\r\n            <TblView\r\n                average={store.average}\r\n                stocks={store.stocks}\r\n                dispatch={dispatch}\r\n                filtersCnt={store.filtersCnt}\r\n                searchParams={store.searchParams}\r\n                compare={store.compare}\r\n            />\r\n        </>\r\n    )\r\n}\r\nexport default Tbl;","import { useState } from \"react\";\r\nimport { findPerDiff } from './store/util';\r\n\r\nconst DiffList = ({ precentages }) => {\r\n    return (\r\n        <table style={{ width: \"10rem\", textAlign: \"left\" }}>\r\n\r\n            {\r\n                precentages.map((percentage) => {\r\n                    return (\r\n                        <tr>\r\n                            <td>{percentage.val}</td>\r\n                            <td>{Math.round(percentage.diff)}%</td>\r\n                        </tr>\r\n                    );\r\n                })\r\n            }\r\n\r\n\r\n        </table>\r\n    )\r\n}\r\n\r\nconst PercentageDiff = ({ label }) => {\r\n    const [vals, setVal] = useState('');\r\n    const [precentages, setPrecentages] = useState([]);\r\n    const values = vals.split(/\\s|%/).filter(v => v).map(v => v.split(',').join(''));\r\n    const onCalc = () => {\r\n        const per = values.reduce((acc, val, key) => {\r\n            let tmp = {\r\n                diff: 0,\r\n                val\r\n            };\r\n            if (key === 0) return [tmp];\r\n            tmp.diff = findPerDiff(val, values[key - 1]);\r\n            return [...acc, tmp];\r\n        }, []);\r\n\r\n        setPrecentages(per);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div style={{ margin: \"0 20px 0 0\" }}>\r\n                <h6>{label}</h6>\r\n                <input type=\"text\" onChange={e => setVal(e.target.value)} />\r\n                <button onClick={onCalc} >Calc</button>\r\n                <DiffList precentages={precentages} />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nconst AddDiff = () => {\r\n    const [cmps, setCmp] = useState([])\r\n    const addCmp = () => {\r\n        const label = prompt(`Enter diff name`);\r\n        if (!label) return;\r\n        setCmp([...cmps, { CmpName: PercentageDiff, label }])\r\n    }\r\n    return (\r\n        <div>\r\n            <h5>Calculate Diff:</h5>\r\n            <button onClick={addCmp}>Add</button>\r\n            <div style={{ display: \"flex\", width: '90%', flexWrap: \"wrap\" }}>\r\n                {cmps.map(cmp => {\r\n                    const { CmpName, label } = cmp;\r\n                    return <CmpName label={label} />\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default AddDiff;","import styled from 'styled-components';\r\n\r\n\r\nconst Container = styled.div`\r\nmargin:40px;\r\nposition:relative;\r\n`;\r\n\r\nexport {\r\n    Container\r\n}","import styled from 'styled-components';\r\n\r\n\r\nconst ModalContainer = styled.div`\r\n    position:absolute;\r\n    top:0;    \r\n    width:auto;\r\n    height:auto;\r\n    background:white;\r\n\r\n`;\r\n\r\nconst ModalContent = styled.div`\r\n`;\r\n\r\nexport {\r\n    ModalContainer,\r\n    ModalContent\r\n}","import { useStore } from './store';\r\nimport { ModalContainer, ModalContent } from './Styles/Modal';\r\nimport TblView from './view/TblView';\r\n\r\nconst Modal = ({ showModal }) => {\r\n    const [store, dispatch] = useStore();\r\n    const stocks = store.stocks.filter((stock, key) => {\r\n        return store.compare.indexOf(key) > -1 ? true : false;\r\n    })\r\n    return (\r\n        <>\r\n            <ModalContainer>\r\n                <ModalContent>\r\n                    <button onClick={showModal}>Close</button>\r\n                    <TblView\r\n                        average={store.average}\r\n                        stocks={stocks}\r\n                        dispatch={dispatch}\r\n                        filtersCnt={store.filtersCnt}\r\n                        searchParams={store.searchParams}\r\n                        compare={store.compare}\r\n                    />\r\n\r\n                </ModalContent>\r\n            </ModalContainer>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Modal;","import styled from 'styled-components';\r\n\r\nconst ModalContainer = styled.div`\r\n    position:fixed;\r\n    width:100%;\r\n    height:100%;\r\n    right:0;\r\n    left:0;\r\n    top:0;\r\n    z-index:1000;\r\n    background:rgb(0, 0, 0, 0.4);\r\n    display:flex;\r\n    justify-content:center;\r\n    align-items:center;    \r\n    overflow:hidden;\r\n`;\r\n\r\nconst ModalBody = styled.div`\r\n    position:relative;\r\n    background:white;\r\n    max-width:100%;\r\n    max-height:100%;\r\n    padding:5px;\r\n    overflow:auto;\r\n`;\r\n\r\nconst ModalClose = styled.div`\r\n    position:absolute;\r\n    top:0;\r\n    right:0;\r\n    padding:5px;\r\n`;\r\n\r\nconst Content = styled.div`\r\n    display:flex;\r\n    flex-wrap: wrap;\r\n    \r\n    >\r\n    div{\r\n        margin:5px;\r\n        max-width:20%;        \r\n    }\r\n    table tr th{\r\n        position:relative;\r\n    }\r\n    \r\n`;\r\nexport {\r\n    ModalContainer,\r\n    ModalBody,\r\n    ModalClose,\r\n    Content\r\n}","import { useStore } from './../store';\r\nimport { useState } from 'react';\r\nimport { ModalContainer, ModalBody, ModalClose, Content } from './Style';\r\nimport { findPerDiff } from './../store/util';\r\nconst getPercentage = (stock, col1, col2) => {\r\n    return findPerDiff(stock[col1], stock[col2]);\r\n}\r\nconst findBest = (stocks, type) => {\r\n    const sortRoe = stocks.sort((a, b) => {\r\n        return parseFloat(b.filters[type]) - parseFloat(a.filters[type]);\r\n    });\r\n    return sortRoe.slice(0, 5);\r\n}\r\nconst findMaxMatch = (...arr) => {\r\n    return arr.reduce((acc, val, key) => {\r\n        const position = (key + 1) % 5;\r\n        const avgPos = position === 0 ? 5 : position;\r\n        if (acc[val.Name]) {\r\n            acc[val.Name].cnt += 1;\r\n            acc[val.Name].avgPos += avgPos;\r\n            acc[val.Name].t.push(avgPos);\r\n        } else {\r\n            acc[val.Name] = { cnt: 1, avgPos: avgPos, t: [position], name: val.Name };\r\n        }\r\n        return acc;\r\n    }, {});\r\n}\r\n\r\nconst sortByBest = (maxMatch) => {\r\n    const matches = Object.values(maxMatch);\r\n    return matches.sort(function (a, b) {\r\n        return b.cnt - a.cnt || a.avgPos - b.avgPos;\r\n    }).slice(0, 5);\r\n}\r\nconst addMetrics = function (stocks) {\r\n    stocks.forEach((stock, key) => {\r\n        stocks[key].filters.epsAnnGrowthPercent = getPercentage(stocks[key].filters, 'EPS12M', 'EPSAnnRs');\r\n        stocks[key].filters.epsPrevAnnGrowthPercent = getPercentage(stocks[key].filters, 'EPSAnnRs', 'EPSPrevAnnRs');\r\n        stocks[key].filters.epsPreYearQtrPercent = getPercentage(stocks[key].filters, 'EPSQtrRs', 'EPSPYQtrRs');\r\n        stocks[key].filters.roePercent = getPercentage(stocks[key].filters, 'ROE', 'ROEPrevAnn');\r\n        stocks[key].filters.rocePercent = getPercentage(stocks[key].filters, 'ROCE', 'ROCEPrevYr');\r\n\r\n    });\r\n    return stocks;\r\n};\r\nconst calc = (stocks) => {\r\n    let parseStocks = JSON.parse(JSON.stringify(stocks));\r\n    parseStocks = addMetrics(parseStocks);\r\n\r\n    //Current\r\n    const roe = findBest(parseStocks, 'ROE');\r\n    const roce = findBest(parseStocks, 'ROCE');\r\n    const eps = findBest(parseStocks, 'EPS12M');\r\n    const saleGrowth = findBest(parseStocks, 'Salesgrowth');\r\n    const qtrSalesVar = findBest(parseStocks, 'QtrSalesVar'); // yoySales growth\r\n\r\n    const currentMatch = findMaxMatch(\r\n        ...roe,\r\n        ...roce,\r\n        ...eps,\r\n        ...saleGrowth,\r\n        ...qtrSalesVar\r\n    );\r\n    const currentBest = sortByBest(currentMatch);\r\n\r\n    //History prev\r\n    const roePrevAnn = findBest(parseStocks, 'ROEPrevAnn');\r\n    const rocePrevYr = findBest(parseStocks, 'ROCEPrevYr');\r\n    const epsPreAn = findBest(parseStocks, 'EPSPrevAnnRs');\r\n    const epsAnn = findBest(parseStocks, 'EPSAnnRs'); // eps last year\r\n    const historyMatch = findMaxMatch(\r\n        ...roePrevAnn,\r\n        ...rocePrevYr,\r\n        ...epsPreAn,\r\n        ...epsAnn\r\n    );\r\n    const histBest = sortByBest(historyMatch);\r\n\r\n    //EPS\r\n    const epsQtr = findBest(parseStocks, 'EPSQtrRs'); // latest qtr\r\n    const epsPQtr = findBest(parseStocks, 'EPSPYQtrRs'); // preceding year qtr\r\n    const epsMatch = findMaxMatch(\r\n        ...epsQtr,\r\n        ...epsPQtr\r\n    );\r\n    const epsBest = sortByBest(epsMatch);\r\n\r\n    //3Year avg\r\n    const roe3 = findBest(parseStocks, 'ROE3Yr');\r\n    const roce3 = findBest(parseStocks, 'ROCE3Yr');\r\n    const sales3 = findBest(parseStocks, 'SalesVar3Yrs');\r\n    const avg3Match = findMaxMatch(\r\n        ...roe3,\r\n        ...roce3,\r\n        ...sales3\r\n    );\r\n    const avg3Best = sortByBest(avg3Match);\r\n\r\n    //5Year avg\r\n    const roe5 = findBest(parseStocks, 'ROE5Yr');\r\n    const roce5 = findBest(parseStocks, 'ROCE5Yr');\r\n    const sales5 = findBest(parseStocks, 'SalesVar5Yrs');\r\n    const avg5Match = findMaxMatch(\r\n        ...roe5,\r\n        ...roce5,\r\n        ...sales5\r\n    );\r\n    const avg5Best = sortByBest(avg5Match);\r\n\r\n    const epsCmp12Mnth = findBest(parseStocks, 'epsAnnGrowthPercent'); // comparing last 12 months with last year\r\n    const epsCmp12MnthMatch = findMaxMatch(\r\n        ...epsCmp12Mnth\r\n    );\r\n    const epsCmp12MnthBest = sortByBest(epsCmp12MnthMatch);\r\n\r\n    const epsCmpLastYr = findBest(parseStocks, 'epsPrevAnnGrowth'); // comparing last year vs prev year\r\n    const epsCmpLastYrMatch = findMaxMatch(\r\n        ...epsCmpLastYr\r\n    );\r\n    const epsCmpLastYrBest = sortByBest(epsCmpLastYrMatch);\r\n\r\n    const epsCmpLastYrQtr = findBest(parseStocks, 'epsPreYearQtr');  // comparing latest qtr vs prev year qtr\r\n    const epsCmpLastYrQtrMatch = findMaxMatch(\r\n        ...epsCmpLastYrQtr\r\n    );\r\n    const epsCmpLastYrQtrBest = sortByBest(epsCmpLastYrQtrMatch);\r\n\r\n    const roePercent = findBest(parseStocks, 'roePercent');\r\n    const roePercentMatch = findMaxMatch(\r\n        ...roePercent\r\n    );\r\n    const roePercentBest = sortByBest(roePercentMatch);\r\n\r\n    const rocePercent = findBest(parseStocks, 'rocePercent');\r\n    const rocePercentMatch = findMaxMatch(\r\n        ...rocePercent\r\n    );\r\n    const rocePercentBest = sortByBest(rocePercentMatch);\r\n\r\n\r\n\r\n    const allMatch = findMaxMatch(\r\n        ...roe,\r\n        ...roce,\r\n        ...eps,\r\n        ...saleGrowth,\r\n        ...qtrSalesVar,\r\n        ...roePrevAnn,\r\n        ...rocePrevYr,\r\n        ...epsPreAn,\r\n        ...epsAnn,\r\n        ...epsQtr,\r\n        ...epsPQtr,\r\n        ...roe3,\r\n        ...roce3,\r\n        ...sales3,\r\n        ...roe5,\r\n        ...roce5,\r\n        ...sales5,\r\n        ...epsCmp12Mnth,\r\n        ...epsCmpLastYr,\r\n        ...epsCmpLastYrQtr,\r\n        ...roePercent,\r\n        ...rocePercent\r\n    );\r\n    const finalBest = sortByBest(allMatch);\r\n    return {\r\n        currentBest,\r\n        histBest,\r\n        epsBest,\r\n        avg3Best,\r\n        avg5Best,\r\n        epsCmp12MnthBest,\r\n        epsCmpLastYrBest,\r\n        epsCmpLastYrQtrBest,\r\n        roePercentBest,\r\n        rocePercentBest,\r\n        finalBest\r\n    };\r\n\r\n    //5Year avg\r\n    // Historic growth\r\n    // sales roe roce, cash\r\n}\r\nconst Tbl = ({ rows }) => {\r\n    return (\r\n        <table border=\"1\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Name</th>\r\n                    <th>Cnt</th>\r\n                    <th>Position</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {rows.map((row) => {\r\n                    return (\r\n                        <>\r\n                            <tr>\r\n                                <td>{row.name}</td>\r\n                                <td>{row.cnt}</td>\r\n                                <td>{row.avgPos}</td>\r\n                            </tr>\r\n                        </>\r\n                    );\r\n                })}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\nconst BestPick = () => {\r\n    const [openBestPick, setBestPic] = useState(false);\r\n    const [store] = useStore();\r\n    const {\r\n        currentBest,\r\n        histBest,\r\n        epsBest,\r\n        avg3Best,\r\n        avg5Best,\r\n        finalBest,\r\n        epsCmp12MnthBest,\r\n        epsCmpLastYrBest,\r\n        epsCmpLastYrQtrBest,\r\n        roePercentBest,\r\n        rocePercentBest\r\n    } = calc(store.stocks);\r\n\r\n    return (\r\n        <>\r\n            <button onClick={e => setBestPic(!openBestPick)} >BestPick</button>\r\n            {\r\n                openBestPick && (<ModalContainer>\r\n                    <ModalBody>\r\n                        <ModalClose onClick={e => setBestPic(!openBestPick)} >X</ModalClose>\r\n                        <Content>\r\n                            <div>\r\n                                <h5>Current</h5>\r\n                                <Tbl rows={currentBest} />\r\n                            </div>\r\n                            <div>\r\n                                <h5>History</h5>\r\n                                <Tbl rows={histBest} />\r\n                            </div>\r\n                            <div>\r\n                                <h5>Avg 3 Years</h5>\r\n                                <Tbl rows={avg3Best} />\r\n                            </div>\r\n                            <div>\r\n                                <h5>Avg 5 Years</h5>\r\n                                <Tbl rows={avg5Best} />\r\n                            </div>\r\n                            <div>\r\n                                <h5>Eps</h5>\r\n                                <Tbl rows={epsBest} />\r\n                            </div>\r\n\r\n\r\n                            <div>\r\n                                <h5>EPS12M vs Last yr</h5>\r\n                                <Tbl rows={epsCmp12MnthBest} />\r\n                            </div>\r\n                            <div>\r\n                                <h5>EPS last yr vs prev yr</h5>\r\n                                <Tbl rows={epsCmpLastYrBest} />\r\n                            </div>\r\n\r\n                            <div>\r\n                                <h5>EPS prev yr qtr</h5>\r\n                                <Tbl rows={epsCmpLastYrQtrBest} />\r\n                            </div>\r\n\r\n                            <div>\r\n                                <h5>Roe vs prev yr</h5>\r\n                                <Tbl rows={roePercentBest} />\r\n                            </div>\r\n\r\n                            <div>\r\n                                <h5>Roce vs prev yr</h5>\r\n                                <Tbl rows={rocePercentBest} />\r\n                            </div>\r\n\r\n                            <div>\r\n                                <h5>Consolidated</h5>\r\n                                <Tbl rows={finalBest} />\r\n                            </div>\r\n                        </Content>\r\n                    </ModalBody>\r\n\r\n                </ModalContainer>)\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BestPick;","import { useState } from 'react';\r\nimport './App.css';\r\nimport Txt from './Txt';\r\nimport Filters from './Filters';\r\nimport Tbl from './Tbl';\r\nimport PercentageDiff from './PercentageDiff';\r\nimport { Container } from './Styles/Container'\r\nimport { Provider, useStore } from './store';\r\nimport Modal from './modal';\r\nimport BestPick from './bestPick';\r\nfunction App() {\r\n  const [store] = useStore();\r\n  const [isModalOpen, setModalOpen] = useState(false);\r\n  const showModal = () => {\r\n    setModalOpen(!isModalOpen);\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <Txt />\r\n      {store.stocks && store.stocks.length > 0 && <Filters />}\r\n      {store.stocks && store.stocks.length > 0 && <h5>Filters added: {store.filtersCnt}</h5>}\r\n      {store.compare && store.compare.length > 1 && <button onClick={showModal} >Compare</button>}\r\n      {store.stocks && store.stocks.length > 0 && <BestPick />}\r\n      {store.stocks && store.stocks.length > 0 && <Tbl />}\r\n      {isModalOpen && <Modal showModal={showModal} />}\r\n\r\n      <PercentageDiff />\r\n    </Container>\r\n  );\r\n}\r\n\r\n\r\nexport default () => {\r\n  return (\r\n    <Provider>\r\n      <App />\r\n    </Provider>\r\n  )\r\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}